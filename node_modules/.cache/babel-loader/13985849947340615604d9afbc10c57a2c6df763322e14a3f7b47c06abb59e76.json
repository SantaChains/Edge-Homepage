{"ast":null,"code":"/**\r\n * 配置管理器 - 处理本地config.json文件的读写\r\n */\n\n// 默认配置\nconst DEFAULT_CONFIG = {\n  version: \"1.0.0\",\n  lastUpdated: new Date().toISOString(),\n  settings: {\n    theme: 'light',\n    backgroundType: 'color',\n    backgroundColor: '#ffffff',\n    backgroundImage: '',\n    backgroundOpacity: 1,\n    backgroundBrightness: 1,\n    backgroundBlur: 0,\n    backgroundFit: 'cover',\n    textColor: '#000000',\n    linkColor: '#4a90e2',\n    fontFamily: 'Arial, sans-serif',\n    gradientType: 'linear',\n    gradientDirection: 'to right',\n    gradientColors: ['#4a90e2', '#9b59b6'],\n    gradientStops: [0, 100],\n    showBackground: true,\n    startupModuleType: 'last',\n    startupModule: 'quote'\n  },\n  data: {\n    lastActiveModule: 'quote',\n    bookmarks: [],\n    todos: [],\n    notes: [],\n    calendar: {\n      events: [],\n      countdowns: []\n    },\n    news: {\n      sources: [],\n      cache: []\n    }\n  },\n  preferences: {\n    autoSave: true,\n    backupInterval: 24,\n    // 小时\n    maxBackups: 5,\n    enableAnalytics: false\n  }\n};\nclass ConfigManager {\n  constructor() {\n    this.config = null;\n    this.configPath = './config.json';\n    this.isLoading = false;\n    this.saveQueue = [];\n    this.autoSaveTimer = null;\n  }\n\n  /**\r\n   * 初始化配置管理器\r\n   */\n  async initialize() {\n    try {\n      this.isLoading = true;\n      await this.loadConfig();\n      this.startAutoSave();\n      console.log('配置管理器初始化成功');\n    } catch (error) {\n      console.error('配置管理器初始化失败:', error);\n      await this.createDefaultConfig();\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  /**\r\n   * 加载配置文件\r\n   */\n  async loadConfig() {\n    try {\n      // 尝试从本地文件加载\n      const response = await fetch(this.configPath);\n      if (response.ok) {\n        const configData = await response.json();\n        this.config = this.mergeWithDefaults(configData);\n        console.log('配置文件加载成功');\n      } else {\n        throw new Error('配置文件不存在');\n      }\n    } catch (error) {\n      console.warn('无法加载配置文件，尝试从localStorage迁移:', error);\n      await this.migrateFromLocalStorage();\n    }\n  }\n\n  /**\r\n   * 从localStorage迁移数据\r\n   */\n  async migrateFromLocalStorage() {\n    try {\n      const migratedConfig = {\n        ...DEFAULT_CONFIG\n      };\n\n      // 迁移设置\n      const oldSettings = this.getFromLocalStorage('homepage-settings', {});\n      if (Object.keys(oldSettings).length > 0) {\n        migratedConfig.settings = {\n          ...migratedConfig.settings,\n          ...oldSettings\n        };\n      }\n\n      // 迁移数据\n      migratedConfig.data.lastActiveModule = this.getFromLocalStorage('last-active-module', 'quote');\n      migratedConfig.data.bookmarks = this.getFromLocalStorage('homepage-bookmarks', []);\n      migratedConfig.data.todos = this.getFromLocalStorage('homepage-todos', []);\n      migratedConfig.data.notes = this.getFromLocalStorage('homepage-notes', []);\n      const calendarData = this.getFromLocalStorage('homepage-calendar', {});\n      if (calendarData.events) migratedConfig.data.calendar.events = calendarData.events;\n      if (calendarData.countdowns) migratedConfig.data.calendar.countdowns = calendarData.countdowns;\n      this.config = migratedConfig;\n\n      // 保存迁移后的配置\n      await this.saveConfig();\n\n      // 清理localStorage（可选）\n      this.clearLocalStorage();\n      console.log('数据迁移完成');\n    } catch (error) {\n      console.error('数据迁移失败:', error);\n      await this.createDefaultConfig();\n    }\n  }\n\n  /**\r\n   * 创建默认配置\r\n   */\n  async createDefaultConfig() {\n    this.config = {\n      ...DEFAULT_CONFIG\n    };\n    await this.saveConfig();\n    console.log('创建默认配置文件');\n  }\n\n  /**\r\n   * 合并配置与默认值\r\n   */\n  mergeWithDefaults(config) {\n    const merged = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\n\n    // 深度合并\n    const deepMerge = (target, source) => {\n      for (const key in source) {\n        if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n          if (!target[key]) target[key] = {};\n          deepMerge(target[key], source[key]);\n        } else {\n          target[key] = source[key];\n        }\n      }\n    };\n    deepMerge(merged, config);\n    merged.lastUpdated = new Date().toISOString();\n    return merged;\n  }\n\n  /**\r\n   * 保存配置文件\r\n   */\n  async saveConfig() {\n    if (!this.config) return;\n    try {\n      this.config.lastUpdated = new Date().toISOString();\n\n      // 创建下载链接保存文件\n      const configJson = JSON.stringify(this.config, null, 2);\n      const blob = new Blob([configJson], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n\n      // 自动下载配置文件到根目录\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'config.json';\n      a.style.display = 'none';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      // 同时保存到localStorage作为备份\n      localStorage.setItem('homepage-config-backup', configJson);\n      console.log('配置文件保存成功');\n    } catch (error) {\n      console.error('保存配置文件失败:', error);\n      // 降级到localStorage\n      this.saveToLocalStorage('homepage-config', this.config);\n    }\n  }\n\n  /**\r\n   * 获取配置值\r\n   */\n  get(path, defaultValue = null) {\n    if (!this.config) return defaultValue;\n    const keys = path.split('.');\n    let current = this.config;\n    for (const key of keys) {\n      if (current && typeof current === 'object' && key in current) {\n        current = current[key];\n      } else {\n        return defaultValue;\n      }\n    }\n    return current;\n  }\n\n  /**\r\n   * 设置配置值\r\n   */\n  async set(path, value) {\n    if (!this.config) await this.initialize();\n    const keys = path.split('.');\n    let current = this.config;\n\n    // 导航到父级对象\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i];\n      if (!current[key] || typeof current[key] !== 'object') {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n\n    // 设置值\n    const lastKey = keys[keys.length - 1];\n    current[lastKey] = value;\n\n    // 队列保存\n    this.queueSave();\n  }\n\n  /**\r\n   * 队列保存（防抖）\r\n   */\n  queueSave() {\n    if (this.saveQueue.length === 0) {\n      setTimeout(async () => {\n        if (this.saveQueue.length > 0) {\n          await this.saveConfig();\n          this.saveQueue = [];\n        }\n      }, 1000); // 1秒后保存\n    }\n    this.saveQueue.push(Date.now());\n  }\n\n  /**\r\n   * 立即保存\r\n   */\n  async forceSave() {\n    this.saveQueue = [];\n    await this.saveConfig();\n  }\n\n  /**\r\n   * 导出配置\r\n   */\n  exportConfig() {\n    if (!this.config) return null;\n    const configJson = JSON.stringify(this.config, null, 2);\n    const blob = new Blob([configJson], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `config-backup-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    return configJson;\n  }\n\n  /**\r\n   * 导入配置\r\n   */\n  async importConfig(file) {\n    try {\n      const text = await file.text();\n      const importedConfig = JSON.parse(text);\n\n      // 验证配置格式\n      if (!this.validateConfig(importedConfig)) {\n        throw new Error('配置文件格式无效');\n      }\n      this.config = this.mergeWithDefaults(importedConfig);\n      await this.saveConfig();\n      return true;\n    } catch (error) {\n      console.error('导入配置失败:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * 验证配置格式\r\n   */\n  validateConfig(config) {\n    return config && typeof config === 'object' && config.settings && config.data;\n  }\n\n  /**\r\n   * 启动自动保存\r\n   */\n  startAutoSave() {\n    if (this.autoSaveTimer) {\n      clearInterval(this.autoSaveTimer);\n    }\n    const interval = this.get('preferences.backupInterval', 24) * 60 * 60 * 1000;\n    this.autoSaveTimer = setInterval(async () => {\n      await this.saveConfig();\n      console.log('自动保存配置完成');\n    }, interval);\n  }\n\n  /**\r\n   * 停止自动保存\r\n   */\n  stopAutoSave() {\n    if (this.autoSaveTimer) {\n      clearInterval(this.autoSaveTimer);\n      this.autoSaveTimer = null;\n    }\n  }\n\n  /**\r\n   * 重置配置\r\n   */\n  async resetConfig() {\n    this.config = {\n      ...DEFAULT_CONFIG\n    };\n    await this.saveConfig();\n    console.log('配置已重置为默认值');\n  }\n\n  /**\r\n   * 获取配置统计信息\r\n   */\n  getStats() {\n    var _this$config$data$boo, _this$config$data$tod, _this$config$data$not, _this$config$data$cal, _this$config$data$cal2, _this$config$data$cal3, _this$config$data$cal4;\n    if (!this.config) return null;\n    return {\n      version: this.config.version,\n      lastUpdated: this.config.lastUpdated,\n      dataSize: JSON.stringify(this.config).length,\n      bookmarksCount: ((_this$config$data$boo = this.config.data.bookmarks) === null || _this$config$data$boo === void 0 ? void 0 : _this$config$data$boo.length) || 0,\n      todosCount: ((_this$config$data$tod = this.config.data.todos) === null || _this$config$data$tod === void 0 ? void 0 : _this$config$data$tod.length) || 0,\n      notesCount: ((_this$config$data$not = this.config.data.notes) === null || _this$config$data$not === void 0 ? void 0 : _this$config$data$not.length) || 0,\n      eventsCount: ((_this$config$data$cal = this.config.data.calendar) === null || _this$config$data$cal === void 0 ? void 0 : (_this$config$data$cal2 = _this$config$data$cal.events) === null || _this$config$data$cal2 === void 0 ? void 0 : _this$config$data$cal2.length) || 0,\n      countdownsCount: ((_this$config$data$cal3 = this.config.data.calendar) === null || _this$config$data$cal3 === void 0 ? void 0 : (_this$config$data$cal4 = _this$config$data$cal3.countdowns) === null || _this$config$data$cal4 === void 0 ? void 0 : _this$config$data$cal4.length) || 0\n    };\n  }\n\n  // 辅助方法\n  getFromLocalStorage(key, defaultValue) {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : defaultValue;\n    } catch {\n      return defaultValue;\n    }\n  }\n  saveToLocalStorage(key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error('localStorage保存失败:', error);\n    }\n  }\n  clearLocalStorage() {\n    const keysToRemove = ['homepage-settings', 'last-active-module', 'homepage-bookmarks', 'homepage-todos', 'homepage-notes', 'homepage-calendar'];\n    keysToRemove.forEach(key => {\n      localStorage.removeItem(key);\n    });\n    console.log('localStorage清理完成');\n  }\n}\n\n// 创建全局实例\nconst configManager = new ConfigManager();\nexport default configManager;\nexport { DEFAULT_CONFIG };","map":{"version":3,"names":["DEFAULT_CONFIG","version","lastUpdated","Date","toISOString","settings","theme","backgroundType","backgroundColor","backgroundImage","backgroundOpacity","backgroundBrightness","backgroundBlur","backgroundFit","textColor","linkColor","fontFamily","gradientType","gradientDirection","gradientColors","gradientStops","showBackground","startupModuleType","startupModule","data","lastActiveModule","bookmarks","todos","notes","calendar","events","countdowns","news","sources","cache","preferences","autoSave","backupInterval","maxBackups","enableAnalytics","ConfigManager","constructor","config","configPath","isLoading","saveQueue","autoSaveTimer","initialize","loadConfig","startAutoSave","console","log","error","createDefaultConfig","response","fetch","ok","configData","json","mergeWithDefaults","Error","warn","migrateFromLocalStorage","migratedConfig","oldSettings","getFromLocalStorage","Object","keys","length","calendarData","saveConfig","clearLocalStorage","merged","JSON","parse","stringify","deepMerge","target","source","key","Array","isArray","configJson","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","style","display","body","appendChild","click","removeChild","revokeObjectURL","localStorage","setItem","saveToLocalStorage","get","path","defaultValue","split","current","set","value","i","lastKey","queueSave","setTimeout","push","now","forceSave","exportConfig","importConfig","file","text","importedConfig","validateConfig","clearInterval","interval","setInterval","stopAutoSave","resetConfig","getStats","_this$config$data$boo","_this$config$data$tod","_this$config$data$not","_this$config$data$cal","_this$config$data$cal2","_this$config$data$cal3","_this$config$data$cal4","dataSize","bookmarksCount","todosCount","notesCount","eventsCount","countdownsCount","item","getItem","keysToRemove","forEach","removeItem","configManager"],"sources":["D:/Jliu Pureey/Documents/Editor/extion/homepage/src/utils/configManager.js"],"sourcesContent":["/**\r\n * 配置管理器 - 处理本地config.json文件的读写\r\n */\r\n\r\n// 默认配置\r\nconst DEFAULT_CONFIG = {\r\n  version: \"1.0.0\",\r\n  lastUpdated: new Date().toISOString(),\r\n  settings: {\r\n    theme: 'light',\r\n    backgroundType: 'color',\r\n    backgroundColor: '#ffffff',\r\n    backgroundImage: '',\r\n    backgroundOpacity: 1,\r\n    backgroundBrightness: 1,\r\n    backgroundBlur: 0,\r\n    backgroundFit: 'cover',\r\n    textColor: '#000000',\r\n    linkColor: '#4a90e2',\r\n    fontFamily: 'Arial, sans-serif',\r\n    gradientType: 'linear',\r\n    gradientDirection: 'to right',\r\n    gradientColors: ['#4a90e2', '#9b59b6'],\r\n    gradientStops: [0, 100],\r\n    showBackground: true,\r\n    startupModuleType: 'last',\r\n    startupModule: 'quote'\r\n  },\r\n  data: {\r\n    lastActiveModule: 'quote',\r\n    bookmarks: [],\r\n    todos: [],\r\n    notes: [],\r\n    calendar: {\r\n      events: [],\r\n      countdowns: []\r\n    },\r\n    news: {\r\n      sources: [],\r\n      cache: []\r\n    }\r\n  },\r\n  preferences: {\r\n    autoSave: true,\r\n    backupInterval: 24, // 小时\r\n    maxBackups: 5,\r\n    enableAnalytics: false\r\n  }\r\n};\r\n\r\nclass ConfigManager {\r\n  constructor() {\r\n    this.config = null;\r\n    this.configPath = './config.json';\r\n    this.isLoading = false;\r\n    this.saveQueue = [];\r\n    this.autoSaveTimer = null;\r\n  }\r\n\r\n  /**\r\n   * 初始化配置管理器\r\n   */\r\n  async initialize() {\r\n    try {\r\n      this.isLoading = true;\r\n      await this.loadConfig();\r\n      this.startAutoSave();\r\n      console.log('配置管理器初始化成功');\r\n    } catch (error) {\r\n      console.error('配置管理器初始化失败:', error);\r\n      await this.createDefaultConfig();\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载配置文件\r\n   */\r\n  async loadConfig() {\r\n    try {\r\n      // 尝试从本地文件加载\r\n      const response = await fetch(this.configPath);\r\n      if (response.ok) {\r\n        const configData = await response.json();\r\n        this.config = this.mergeWithDefaults(configData);\r\n        console.log('配置文件加载成功');\r\n      } else {\r\n        throw new Error('配置文件不存在');\r\n      }\r\n    } catch (error) {\r\n      console.warn('无法加载配置文件，尝试从localStorage迁移:', error);\r\n      await this.migrateFromLocalStorage();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从localStorage迁移数据\r\n   */\r\n  async migrateFromLocalStorage() {\r\n    try {\r\n      const migratedConfig = { ...DEFAULT_CONFIG };\r\n      \r\n      // 迁移设置\r\n      const oldSettings = this.getFromLocalStorage('homepage-settings', {});\r\n      if (Object.keys(oldSettings).length > 0) {\r\n        migratedConfig.settings = { ...migratedConfig.settings, ...oldSettings };\r\n      }\r\n\r\n      // 迁移数据\r\n      migratedConfig.data.lastActiveModule = this.getFromLocalStorage('last-active-module', 'quote');\r\n      migratedConfig.data.bookmarks = this.getFromLocalStorage('homepage-bookmarks', []);\r\n      migratedConfig.data.todos = this.getFromLocalStorage('homepage-todos', []);\r\n      migratedConfig.data.notes = this.getFromLocalStorage('homepage-notes', []);\r\n      \r\n      const calendarData = this.getFromLocalStorage('homepage-calendar', {});\r\n      if (calendarData.events) migratedConfig.data.calendar.events = calendarData.events;\r\n      if (calendarData.countdowns) migratedConfig.data.calendar.countdowns = calendarData.countdowns;\r\n\r\n      this.config = migratedConfig;\r\n      \r\n      // 保存迁移后的配置\r\n      await this.saveConfig();\r\n      \r\n      // 清理localStorage（可选）\r\n      this.clearLocalStorage();\r\n      \r\n      console.log('数据迁移完成');\r\n    } catch (error) {\r\n      console.error('数据迁移失败:', error);\r\n      await this.createDefaultConfig();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建默认配置\r\n   */\r\n  async createDefaultConfig() {\r\n    this.config = { ...DEFAULT_CONFIG };\r\n    await this.saveConfig();\r\n    console.log('创建默认配置文件');\r\n  }\r\n\r\n  /**\r\n   * 合并配置与默认值\r\n   */\r\n  mergeWithDefaults(config) {\r\n    const merged = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\r\n    \r\n    // 深度合并\r\n    const deepMerge = (target, source) => {\r\n      for (const key in source) {\r\n        if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\r\n          if (!target[key]) target[key] = {};\r\n          deepMerge(target[key], source[key]);\r\n        } else {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    };\r\n\r\n    deepMerge(merged, config);\r\n    merged.lastUpdated = new Date().toISOString();\r\n    \r\n    return merged;\r\n  }\r\n\r\n  /**\r\n   * 保存配置文件\r\n   */\r\n  async saveConfig() {\r\n    if (!this.config) return;\r\n\r\n    try {\r\n      this.config.lastUpdated = new Date().toISOString();\r\n      \r\n      // 创建下载链接保存文件\r\n      const configJson = JSON.stringify(this.config, null, 2);\r\n      const blob = new Blob([configJson], { type: 'application/json' });\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      // 自动下载配置文件到根目录\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = 'config.json';\r\n      a.style.display = 'none';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      URL.revokeObjectURL(url);\r\n      \r\n      // 同时保存到localStorage作为备份\r\n      localStorage.setItem('homepage-config-backup', configJson);\r\n      \r\n      console.log('配置文件保存成功');\r\n    } catch (error) {\r\n      console.error('保存配置文件失败:', error);\r\n      // 降级到localStorage\r\n      this.saveToLocalStorage('homepage-config', this.config);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取配置值\r\n   */\r\n  get(path, defaultValue = null) {\r\n    if (!this.config) return defaultValue;\r\n    \r\n    const keys = path.split('.');\r\n    let current = this.config;\r\n    \r\n    for (const key of keys) {\r\n      if (current && typeof current === 'object' && key in current) {\r\n        current = current[key];\r\n      } else {\r\n        return defaultValue;\r\n      }\r\n    }\r\n    \r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * 设置配置值\r\n   */\r\n  async set(path, value) {\r\n    if (!this.config) await this.initialize();\r\n    \r\n    const keys = path.split('.');\r\n    let current = this.config;\r\n    \r\n    // 导航到父级对象\r\n    for (let i = 0; i < keys.length - 1; i++) {\r\n      const key = keys[i];\r\n      if (!current[key] || typeof current[key] !== 'object') {\r\n        current[key] = {};\r\n      }\r\n      current = current[key];\r\n    }\r\n    \r\n    // 设置值\r\n    const lastKey = keys[keys.length - 1];\r\n    current[lastKey] = value;\r\n    \r\n    // 队列保存\r\n    this.queueSave();\r\n  }\r\n\r\n  /**\r\n   * 队列保存（防抖）\r\n   */\r\n  queueSave() {\r\n    if (this.saveQueue.length === 0) {\r\n      setTimeout(async () => {\r\n        if (this.saveQueue.length > 0) {\r\n          await this.saveConfig();\r\n          this.saveQueue = [];\r\n        }\r\n      }, 1000); // 1秒后保存\r\n    }\r\n    this.saveQueue.push(Date.now());\r\n  }\r\n\r\n  /**\r\n   * 立即保存\r\n   */\r\n  async forceSave() {\r\n    this.saveQueue = [];\r\n    await this.saveConfig();\r\n  }\r\n\r\n  /**\r\n   * 导出配置\r\n   */\r\n  exportConfig() {\r\n    if (!this.config) return null;\r\n    \r\n    const configJson = JSON.stringify(this.config, null, 2);\r\n    const blob = new Blob([configJson], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `config-backup-${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    return configJson;\r\n  }\r\n\r\n  /**\r\n   * 导入配置\r\n   */\r\n  async importConfig(file) {\r\n    try {\r\n      const text = await file.text();\r\n      const importedConfig = JSON.parse(text);\r\n      \r\n      // 验证配置格式\r\n      if (!this.validateConfig(importedConfig)) {\r\n        throw new Error('配置文件格式无效');\r\n      }\r\n      \r\n      this.config = this.mergeWithDefaults(importedConfig);\r\n      await this.saveConfig();\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('导入配置失败:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 验证配置格式\r\n   */\r\n  validateConfig(config) {\r\n    return config && \r\n           typeof config === 'object' && \r\n           config.settings && \r\n           config.data;\r\n  }\r\n\r\n  /**\r\n   * 启动自动保存\r\n   */\r\n  startAutoSave() {\r\n    if (this.autoSaveTimer) {\r\n      clearInterval(this.autoSaveTimer);\r\n    }\r\n    \r\n    const interval = (this.get('preferences.backupInterval', 24) * 60 * 60 * 1000);\r\n    this.autoSaveTimer = setInterval(async () => {\r\n      await this.saveConfig();\r\n      console.log('自动保存配置完成');\r\n    }, interval);\r\n  }\r\n\r\n  /**\r\n   * 停止自动保存\r\n   */\r\n  stopAutoSave() {\r\n    if (this.autoSaveTimer) {\r\n      clearInterval(this.autoSaveTimer);\r\n      this.autoSaveTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重置配置\r\n   */\r\n  async resetConfig() {\r\n    this.config = { ...DEFAULT_CONFIG };\r\n    await this.saveConfig();\r\n    console.log('配置已重置为默认值');\r\n  }\r\n\r\n  /**\r\n   * 获取配置统计信息\r\n   */\r\n  getStats() {\r\n    if (!this.config) return null;\r\n    \r\n    return {\r\n      version: this.config.version,\r\n      lastUpdated: this.config.lastUpdated,\r\n      dataSize: JSON.stringify(this.config).length,\r\n      bookmarksCount: this.config.data.bookmarks?.length || 0,\r\n      todosCount: this.config.data.todos?.length || 0,\r\n      notesCount: this.config.data.notes?.length || 0,\r\n      eventsCount: this.config.data.calendar?.events?.length || 0,\r\n      countdownsCount: this.config.data.calendar?.countdowns?.length || 0\r\n    };\r\n  }\r\n\r\n  // 辅助方法\r\n  getFromLocalStorage(key, defaultValue) {\r\n    try {\r\n      const item = localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : defaultValue;\r\n    } catch {\r\n      return defaultValue;\r\n    }\r\n  }\r\n\r\n  saveToLocalStorage(key, value) {\r\n    try {\r\n      localStorage.setItem(key, JSON.stringify(value));\r\n    } catch (error) {\r\n      console.error('localStorage保存失败:', error);\r\n    }\r\n  }\r\n\r\n  clearLocalStorage() {\r\n    const keysToRemove = [\r\n      'homepage-settings',\r\n      'last-active-module',\r\n      'homepage-bookmarks',\r\n      'homepage-todos',\r\n      'homepage-notes',\r\n      'homepage-calendar'\r\n    ];\r\n    \r\n    keysToRemove.forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n    \r\n    console.log('localStorage清理完成');\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nconst configManager = new ConfigManager();\r\n\r\nexport default configManager;\r\nexport { DEFAULT_CONFIG };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}