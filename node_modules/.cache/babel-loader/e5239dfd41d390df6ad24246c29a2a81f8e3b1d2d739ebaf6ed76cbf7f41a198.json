{"ast":null,"code":"import { format, addDays, differenceInDays, isValid, parse } from 'date-fns';\nimport { zhCN } from 'date-fns/locale';\n\n/**\r\n * 格式化日期时间\r\n * @param {Date|number} date - 日期对象或时间戳\r\n * @param {string} formatStr - 格式化字符串\r\n * @param {Object} options - 选项\r\n * @returns {string} 格式化后的日期时间字符串\r\n */\nexport const formatDateTime = (date, formatStr = 'yyyy-MM-dd HH:mm:ss', options = {}) => {\n  try {\n    const dateObj = date instanceof Date ? date : new Date(date);\n    return format(dateObj, formatStr, {\n      locale: zhCN,\n      ...options\n    });\n  } catch (error) {\n    console.error('格式化日期时间失败:', error);\n    return '';\n  }\n};\n\n/**\r\n * 获取当前日期时间\r\n * @param {string} formatStr - 格式化字符串\r\n * @returns {string} 格式化后的当前日期时间字符串\r\n */\nexport const getCurrentDateTime = (formatStr = 'yyyy-MM-dd HH:mm:ss') => {\n  return formatDateTime(new Date(), formatStr);\n};\n\n/**\r\n * 计算两个日期之间的天数差\r\n * @param {Date|number|string} startDate - 开始日期\r\n * @param {Date|number|string} endDate - 结束日期\r\n * @returns {number} 天数差\r\n */\nexport const getDaysDifference = (startDate, endDate) => {\n  try {\n    const start = startDate instanceof Date ? startDate : new Date(startDate);\n    const end = endDate instanceof Date ? endDate : new Date(endDate);\n    return differenceInDays(end, start);\n  } catch (error) {\n    console.error('计算日期差异失败:', error);\n    return 0;\n  }\n};\n\n/**\r\n * 添加天数到日期\r\n * @param {Date|number|string} date - 日期\r\n * @param {number} days - 天数\r\n * @returns {Date} 新日期\r\n */\nexport const addDaysToDate = (date, days) => {\n  try {\n    const dateObj = date instanceof Date ? date : new Date(date);\n    return addDays(dateObj, days);\n  } catch (error) {\n    console.error('添加天数到日期失败:', error);\n    return new Date();\n  }\n};\n\n/**\r\n * 解析日期字符串\r\n * @param {string} dateStr - 日期字符串\r\n * @param {string} formatStr - 格式化字符串\r\n * @returns {Date|null} 解析后的日期对象，如果解析失败则返回null\r\n */\nexport const parseDate = (dateStr, formatStr = 'yyyy-MM-dd') => {\n  try {\n    const parsedDate = parse(dateStr, formatStr, new Date());\n    return isValid(parsedDate) ? parsedDate : null;\n  } catch (error) {\n    console.error('解析日期失败:', error);\n    return null;\n  }\n};\n\n/**\r\n * 获取农历日期（简化版，仅用于示例）\r\n * @param {Date|number|string} date - 日期\r\n * @returns {string} 农历日期字符串\r\n */\nexport const getLunarDate = date => {\n  // 这里应该使用专门的农历计算库，这里仅作为示例返回固定值\n  return '农历日期计算需要专门的库';\n};\n\n/**\r\n * 获取竺纪笠历法日期（示例）\r\n * @param {Date|number|string} date - 日期\r\n * @returns {string} 竺纪笠历法日期字符串\r\n */\nexport const getZhuJiLiDate = date => {\n  try {\n    const dateObj = date instanceof Date ? date : new Date(date);\n\n    // 这里是一个简化的竺纪笠历法计算示例\n    // 实际应用中应该使用更复杂的算法\n    const year = dateObj.getFullYear() + 2698; // 假设竺纪笠纪元比公元早2698年\n    const month = dateObj.getMonth() + 1;\n    const day = dateObj.getDate();\n    return `竺纪笠 ${year}年 ${month}月 ${day}日`;\n  } catch (error) {\n    console.error('计算竺纪笠日期失败:', error);\n    return '';\n  }\n};\n\n/**\r\n * 获取一周的日期范围\r\n * @param {Date} date - 日期\r\n * @returns {Array} 一周的日期数组\r\n */\nexport const getWeekDates = (date = new Date()) => {\n  const day = date.getDay();\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // 调整周日\n\n  const monday = new Date(date.setDate(diff));\n  const weekDates = [];\n  for (let i = 0; i < 7; i++) {\n    weekDates.push(addDaysToDate(monday, i));\n  }\n  return weekDates;\n};\n\n/**\r\n * 获取月份的天数\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {number} 天数\r\n */\nexport const getDaysInMonth = (year, month) => {\n  return new Date(year, month, 0).getDate();\n};\n\n/**\r\n * 获取月份的第一天是星期几\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {number} 星期几（0-6，0表示星期日）\r\n */\nexport const getFirstDayOfMonth = (year, month) => {\n  return new Date(year, month - 1, 1).getDay();\n};\n\n/**\r\n * 生成月历数据\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {Array} 月历数据\r\n */\nexport const generateCalendarData = (year, month) => {\n  const daysInMonth = getDaysInMonth(year, month);\n  const firstDay = getFirstDayOfMonth(year, month);\n\n  // 调整星期日为一周的第一天\n  const adjustedFirstDay = firstDay === 0 ? 6 : firstDay - 1;\n  const calendarData = [];\n  let week = [];\n\n  // 填充月初的空白\n  for (let i = 0; i < adjustedFirstDay; i++) {\n    week.push(null);\n  }\n\n  // 填充日期\n  for (let day = 1; day <= daysInMonth; day++) {\n    week.push(day);\n    if (week.length === 7) {\n      calendarData.push(week);\n      week = [];\n    }\n  }\n\n  // 填充月末的空白\n  if (week.length > 0) {\n    while (week.length < 7) {\n      week.push(null);\n    }\n    calendarData.push(week);\n  }\n  return calendarData;\n};","map":{"version":3,"names":["format","addDays","differenceInDays","isValid","parse","zhCN","formatDateTime","date","formatStr","options","dateObj","Date","locale","error","console","getCurrentDateTime","getDaysDifference","startDate","endDate","start","end","addDaysToDate","days","parseDate","dateStr","parsedDate","getLunarDate","getZhuJiLiDate","year","getFullYear","month","getMonth","day","getDate","getWeekDates","getDay","diff","monday","setDate","weekDates","i","push","getDaysInMonth","getFirstDayOfMonth","generateCalendarData","daysInMonth","firstDay","adjustedFirstDay","calendarData","week","length"],"sources":["D:/Jliu Pureey/Documents/Editor/extion/homepage/src/utils/dateTime.js"],"sourcesContent":["import { format, addDays, differenceInDays, isValid, parse } from 'date-fns';\r\nimport { zhCN } from 'date-fns/locale';\r\n\r\n/**\r\n * 格式化日期时间\r\n * @param {Date|number} date - 日期对象或时间戳\r\n * @param {string} formatStr - 格式化字符串\r\n * @param {Object} options - 选项\r\n * @returns {string} 格式化后的日期时间字符串\r\n */\r\nexport const formatDateTime = (date, formatStr = 'yyyy-MM-dd HH:mm:ss', options = {}) => {\r\n  try {\r\n    const dateObj = date instanceof Date ? date : new Date(date);\r\n    return format(dateObj, formatStr, {\r\n      locale: zhCN,\r\n      ...options\r\n    });\r\n  } catch (error) {\r\n    console.error('格式化日期时间失败:', error);\r\n    return '';\r\n  }\r\n};\r\n\r\n/**\r\n * 获取当前日期时间\r\n * @param {string} formatStr - 格式化字符串\r\n * @returns {string} 格式化后的当前日期时间字符串\r\n */\r\nexport const getCurrentDateTime = (formatStr = 'yyyy-MM-dd HH:mm:ss') => {\r\n  return formatDateTime(new Date(), formatStr);\r\n};\r\n\r\n/**\r\n * 计算两个日期之间的天数差\r\n * @param {Date|number|string} startDate - 开始日期\r\n * @param {Date|number|string} endDate - 结束日期\r\n * @returns {number} 天数差\r\n */\r\nexport const getDaysDifference = (startDate, endDate) => {\r\n  try {\r\n    const start = startDate instanceof Date ? startDate : new Date(startDate);\r\n    const end = endDate instanceof Date ? endDate : new Date(endDate);\r\n    return differenceInDays(end, start);\r\n  } catch (error) {\r\n    console.error('计算日期差异失败:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * 添加天数到日期\r\n * @param {Date|number|string} date - 日期\r\n * @param {number} days - 天数\r\n * @returns {Date} 新日期\r\n */\r\nexport const addDaysToDate = (date, days) => {\r\n  try {\r\n    const dateObj = date instanceof Date ? date : new Date(date);\r\n    return addDays(dateObj, days);\r\n  } catch (error) {\r\n    console.error('添加天数到日期失败:', error);\r\n    return new Date();\r\n  }\r\n};\r\n\r\n/**\r\n * 解析日期字符串\r\n * @param {string} dateStr - 日期字符串\r\n * @param {string} formatStr - 格式化字符串\r\n * @returns {Date|null} 解析后的日期对象，如果解析失败则返回null\r\n */\r\nexport const parseDate = (dateStr, formatStr = 'yyyy-MM-dd') => {\r\n  try {\r\n    const parsedDate = parse(dateStr, formatStr, new Date());\r\n    return isValid(parsedDate) ? parsedDate : null;\r\n  } catch (error) {\r\n    console.error('解析日期失败:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取农历日期（简化版，仅用于示例）\r\n * @param {Date|number|string} date - 日期\r\n * @returns {string} 农历日期字符串\r\n */\r\nexport const getLunarDate = (date) => {\r\n  // 这里应该使用专门的农历计算库，这里仅作为示例返回固定值\r\n  return '农历日期计算需要专门的库';\r\n};\r\n\r\n/**\r\n * 获取竺纪笠历法日期（示例）\r\n * @param {Date|number|string} date - 日期\r\n * @returns {string} 竺纪笠历法日期字符串\r\n */\r\nexport const getZhuJiLiDate = (date) => {\r\n  try {\r\n    const dateObj = date instanceof Date ? date : new Date(date);\r\n    \r\n    // 这里是一个简化的竺纪笠历法计算示例\r\n    // 实际应用中应该使用更复杂的算法\r\n    const year = dateObj.getFullYear() + 2698; // 假设竺纪笠纪元比公元早2698年\r\n    const month = dateObj.getMonth() + 1;\r\n    const day = dateObj.getDate();\r\n    \r\n    return `竺纪笠 ${year}年 ${month}月 ${day}日`;\r\n  } catch (error) {\r\n    console.error('计算竺纪笠日期失败:', error);\r\n    return '';\r\n  }\r\n};\r\n\r\n/**\r\n * 获取一周的日期范围\r\n * @param {Date} date - 日期\r\n * @returns {Array} 一周的日期数组\r\n */\r\nexport const getWeekDates = (date = new Date()) => {\r\n  const day = date.getDay();\r\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // 调整周日\r\n  \r\n  const monday = new Date(date.setDate(diff));\r\n  const weekDates = [];\r\n  \r\n  for (let i = 0; i < 7; i++) {\r\n    weekDates.push(addDaysToDate(monday, i));\r\n  }\r\n  \r\n  return weekDates;\r\n};\r\n\r\n/**\r\n * 获取月份的天数\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {number} 天数\r\n */\r\nexport const getDaysInMonth = (year, month) => {\r\n  return new Date(year, month, 0).getDate();\r\n};\r\n\r\n/**\r\n * 获取月份的第一天是星期几\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {number} 星期几（0-6，0表示星期日）\r\n */\r\nexport const getFirstDayOfMonth = (year, month) => {\r\n  return new Date(year, month - 1, 1).getDay();\r\n};\r\n\r\n/**\r\n * 生成月历数据\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {Array} 月历数据\r\n */\r\nexport const generateCalendarData = (year, month) => {\r\n  const daysInMonth = getDaysInMonth(year, month);\r\n  const firstDay = getFirstDayOfMonth(year, month);\r\n  \r\n  // 调整星期日为一周的第一天\r\n  const adjustedFirstDay = firstDay === 0 ? 6 : firstDay - 1;\r\n  \r\n  const calendarData = [];\r\n  let week = [];\r\n  \r\n  // 填充月初的空白\r\n  for (let i = 0; i < adjustedFirstDay; i++) {\r\n    week.push(null);\r\n  }\r\n  \r\n  // 填充日期\r\n  for (let day = 1; day <= daysInMonth; day++) {\r\n    week.push(day);\r\n    \r\n    if (week.length === 7) {\r\n      calendarData.push(week);\r\n      week = [];\r\n    }\r\n  }\r\n  \r\n  // 填充月末的空白\r\n  if (week.length > 0) {\r\n    while (week.length < 7) {\r\n      week.push(null);\r\n    }\r\n    calendarData.push(week);\r\n  }\r\n  \r\n  return calendarData;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}