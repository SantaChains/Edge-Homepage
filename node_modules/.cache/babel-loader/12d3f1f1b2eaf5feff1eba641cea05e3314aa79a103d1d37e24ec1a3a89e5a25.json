{"ast":null,"code":"/**\r\n * 应用启动管理器\r\n * 处理应用初始化、设置加载和延迟显示\r\n */\n\nimport configManager from './simpleConfigManager';\nimport backgroundManager from './backgroundManager';\nclass AppInitializer {\n  constructor() {\n    this.isInitialized = false;\n    this.initPromise = null;\n    this.settings = {};\n  }\n\n  /**\r\n   * 初始化应用\r\n   * @param {Object} options 初始化选项\r\n   * @returns {Promise<Object>} 初始化结果\r\n   */\n  async initialize(options = {}) {\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n    this.initPromise = this._performInitialization(options);\n    return this.initPromise;\n  }\n\n  /**\r\n   * 执行初始化过程\r\n   * @private\r\n   */\n  async _performInitialization(options) {\n    try {\n      const {\n        delay = 150,\n        // 延迟时间，避免闪烁\n        showLoadingScreen = true\n      } = options;\n      console.log('🚀 开始应用初始化...');\n\n      // 显示加载屏幕\n      if (showLoadingScreen) {\n        this._showLoadingScreen();\n      }\n\n      // 预先应用基础样式，避免闪烁\n      this._applyBaseStyles();\n\n      // 延迟初始化，避免闪烁\n      if (delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n\n      // 初始化配置管理器\n      console.log('📁 初始化配置管理器...');\n      await configManager.initialize();\n\n      // 加载设置\n      console.log('⚙️ 加载用户设置...');\n      this.settings = configManager.get('settings', {});\n      console.log('📋 已加载设置项:', Object.keys(this.settings).length);\n\n      // 应用基础设置\n      this._applyBaseSettings(this.settings);\n\n      // 确定启动模块\n      const startupModule = this._determineStartupModule(this.settings);\n      console.log('📱 确定启动模块:', startupModule);\n\n      // 应用完整设置\n      console.log('🎨 应用完整设置...');\n      this._applyFullSettings(this.settings);\n\n      // 隐藏加载屏幕\n      if (showLoadingScreen) {\n        this._hideLoadingScreen();\n      }\n      this.isInitialized = true;\n      console.log('✅ 应用初始化完成');\n      return {\n        success: true,\n        settings: this.settings,\n        startupModule,\n        message: '应用初始化成功'\n      };\n    } catch (error) {\n      console.error('❌ 应用初始化失败:', error);\n\n      // 隐藏加载屏幕\n      this._hideLoadingScreen();\n\n      // 应用默认设置，确保应用可用\n      this._applyDefaultSettings();\n      return {\n        success: false,\n        error,\n        settings: {},\n        startupModule: 'quote',\n        message: '应用初始化失败，使用默认设置'\n      };\n    }\n  }\n\n  /**\r\n   * 确定启动模块\r\n   * @private\r\n   */\n  _determineStartupModule(settings) {\n    const moduleComponents = ['calendar', 'bookmark', 'todo', 'note', 'quote', 'news'];\n    let startupModule = 'quote'; // 默认为一语\n\n    if (settings.startupModuleType === 'last') {\n      // 继承上次使用的模块\n      const lastModule = configManager.get('data.lastActiveModule', 'quote');\n      startupModule = lastModule;\n    } else if (settings.startupModuleType === 'specific') {\n      // 使用指定的模块\n      startupModule = settings.startupModule || 'quote';\n    } else {\n      // 如果没有设置，检查是否有上次使用的模块\n      const lastModule = configManager.get('data.lastActiveModule', null);\n      if (lastModule) {\n        startupModule = lastModule;\n      }\n    }\n\n    // 验证模块是否存在\n    if (!moduleComponents.includes(startupModule)) {\n      startupModule = 'quote';\n    }\n    return startupModule;\n  }\n\n  /**\r\n   * 应用基础样式（在配置加载前）\r\n   * @private\r\n   */\n  _applyBaseStyles() {\n    const root = document.documentElement;\n\n    // 设置页面标题\n    document.title = '時';\n\n    // 应用基础CSS变量\n    root.style.setProperty('--primary-color', '#4a90e2');\n    root.style.setProperty('--transition-speed', '0.3s');\n\n    // 确保基础变量存在\n    root.style.setProperty('--background-color', '#ffffff');\n    root.style.setProperty('--card-background', '#f8f8f8');\n    root.style.setProperty('--border-color', '#e0e0e0');\n    root.style.setProperty('--text-color', '#333333');\n    root.style.setProperty('--text-secondary-color', '#666666');\n    root.style.setProperty('--hover-background', '#f0f0f0');\n  }\n\n  /**\r\n   * 应用基础设置\r\n   * @private\r\n   */\n  _applyBaseSettings(settings) {\n    const root = document.documentElement;\n\n    // 应用用户自定义的基础CSS变量\n    root.style.setProperty('--primary-color', settings.linkColor || '#4a90e2');\n\n    // 预设主题变量，避免闪烁\n    if (settings.theme === 'dark') {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n  }\n\n  /**\r\n   * 应用默认设置（初始化失败时使用）\r\n   * @private\r\n   */\n  _applyDefaultSettings() {\n    const root = document.documentElement;\n\n    // 设置页面标题\n    document.title = '時';\n\n    // 应用默认主题\n    root.style.setProperty('--background-color', '#ffffff');\n    root.style.setProperty('--card-background', '#f8f8f8');\n    root.style.setProperty('--border-color', '#e0e0e0');\n    root.style.setProperty('--text-color', '#333333');\n    root.style.setProperty('--text-secondary-color', '#666666');\n    root.style.setProperty('--hover-background', '#f0f0f0');\n    root.style.setProperty('--primary-color', '#4a90e2');\n    document.body.classList.remove('dark-mode');\n    console.log('🔧 已应用默认设置');\n  }\n\n  /**\r\n   * 应用完整设置\r\n   * @private\r\n   */\n  _applyFullSettings(settings) {\n    try {\n      const root = document.documentElement;\n      const body = document.body;\n\n      // 应用主题\n      const theme = settings.theme || 'light';\n      if (theme === 'dark') {\n        root.style.setProperty('--background-color', '#121212');\n        root.style.setProperty('--card-background', '#1e1e1e');\n        root.style.setProperty('--border-color', '#333333');\n        root.style.setProperty('--text-color', settings.textColor || '#e0e0e0');\n        root.style.setProperty('--text-secondary-color', '#a0a0a0');\n        root.style.setProperty('--hover-background', '#333333');\n        root.style.setProperty('--primary-color-light', 'rgba(74, 144, 226, 0.2)');\n        body.classList.add('dark-mode');\n      } else {\n        root.style.setProperty('--background-color', '#ffffff');\n        root.style.setProperty('--card-background', '#f8f8f8');\n        root.style.setProperty('--border-color', '#e0e0e0');\n        root.style.setProperty('--text-color', settings.textColor || '#333333');\n        root.style.setProperty('--text-secondary-color', '#666666');\n        root.style.setProperty('--hover-background', '#f0f0f0');\n        root.style.setProperty('--primary-color-light', 'rgba(74, 144, 226, 0.1)');\n        body.classList.remove('dark-mode');\n      }\n\n      // 应用字体设置\n      if (settings.fontFamily) {\n        root.style.setProperty('--font-family', settings.fontFamily);\n      }\n\n      // 使用背景管理器应用背景设置\n      backgroundManager.applySettings(settings);\n    } catch (error) {\n      console.error('应用完整设置时出错:', error);\n    }\n  }\n\n  /**\r\n   * 显示加载屏幕\r\n   * @private\r\n   */\n  _showLoadingScreen() {\n    // 检查是否已存在加载屏幕\n    if (document.getElementById('app-loading-screen')) {\n      return;\n    }\n    const loadingScreen = document.createElement('div');\n    loadingScreen.id = 'app-loading-screen';\n    loadingScreen.innerHTML = `\n      <div style=\"\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100vw;\n        height: 100vh;\n        background: var(--background-color, #ffffff);\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        z-index: 9999;\n        transition: opacity 0.3s ease;\n      \">\n        <div style=\"\n          width: 60px;\n          height: 60px;\n          border: 3px solid var(--border-color, #e0e0e0);\n          border-top: 3px solid var(--primary-color, #4a90e2);\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n          margin-bottom: 20px;\n        \"></div>\n        <div style=\"\n          font-size: 18px;\n          font-weight: 500;\n          color: var(--text-color, #333333);\n          margin-bottom: 8px;\n        \">正在加载...</div>\n        <div style=\"\n          font-size: 14px;\n          color: var(--text-secondary-color, #666666);\n        \">请稍候，正在初始化应用程序</div>\n      </div>\n      <style>\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n      </style>\n    `;\n    document.body.appendChild(loadingScreen);\n  }\n\n  /**\r\n   * 隐藏加载屏幕\r\n   * @private\r\n   */\n  _hideLoadingScreen() {\n    const loadingScreen = document.getElementById('app-loading-screen');\n    if (loadingScreen) {\n      loadingScreen.style.opacity = '0';\n      setTimeout(() => {\n        if (loadingScreen.parentNode) {\n          loadingScreen.parentNode.removeChild(loadingScreen);\n        }\n      }, 300);\n    }\n  }\n\n  /**\r\n   * 获取当前设置\r\n   */\n  getSettings() {\n    return this.settings;\n  }\n\n  /**\r\n   * 更新设置\r\n   */\n  updateSettings(newSettings) {\n    this.settings = {\n      ...this.settings,\n      ...newSettings\n    };\n    this._applyFullSettings(this.settings);\n  }\n\n  /**\r\n   * 重置初始化状态\r\n   */\n  reset() {\n    this.isInitialized = false;\n    this.initPromise = null;\n    this.settings = {};\n  }\n}\n\n// 创建单例实例\nconst appInitializer = new AppInitializer();\nexport default appInitializer;","map":{"version":3,"names":["configManager","backgroundManager","AppInitializer","constructor","isInitialized","initPromise","settings","initialize","options","_performInitialization","delay","showLoadingScreen","console","log","_showLoadingScreen","_applyBaseStyles","Promise","resolve","setTimeout","get","Object","keys","length","_applyBaseSettings","startupModule","_determineStartupModule","_applyFullSettings","_hideLoadingScreen","success","message","error","_applyDefaultSettings","moduleComponents","startupModuleType","lastModule","includes","root","document","documentElement","title","style","setProperty","linkColor","theme","body","classList","add","remove","textColor","fontFamily","applySettings","getElementById","loadingScreen","createElement","id","innerHTML","appendChild","opacity","parentNode","removeChild","getSettings","updateSettings","newSettings","reset","appInitializer"],"sources":["D:/Jliu Pureey/Documents/Editor/extion/homepage/src/utils/appInitializer.js"],"sourcesContent":["/**\r\n * 应用启动管理器\r\n * 处理应用初始化、设置加载和延迟显示\r\n */\r\n\r\nimport configManager from './simpleConfigManager';\r\nimport backgroundManager from './backgroundManager';\r\n\r\nclass AppInitializer {\r\n  constructor() {\r\n    this.isInitialized = false;\r\n    this.initPromise = null;\r\n    this.settings = {};\r\n  }\r\n\r\n  /**\r\n   * 初始化应用\r\n   * @param {Object} options 初始化选项\r\n   * @returns {Promise<Object>} 初始化结果\r\n   */\r\n  async initialize(options = {}) {\r\n    if (this.initPromise) {\r\n      return this.initPromise;\r\n    }\r\n\r\n    this.initPromise = this._performInitialization(options);\r\n    return this.initPromise;\r\n  }\r\n\r\n  /**\r\n   * 执行初始化过程\r\n   * @private\r\n   */\r\n  async _performInitialization(options) {\r\n    try {\r\n      const { \r\n        delay = 150, // 延迟时间，避免闪烁\r\n        showLoadingScreen = true \r\n      } = options;\r\n\r\n      console.log('🚀 开始应用初始化...');\r\n\r\n      // 显示加载屏幕\r\n      if (showLoadingScreen) {\r\n        this._showLoadingScreen();\r\n      }\r\n\r\n      // 预先应用基础样式，避免闪烁\r\n      this._applyBaseStyles();\r\n\r\n      // 延迟初始化，避免闪烁\r\n      if (delay > 0) {\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n\r\n      // 初始化配置管理器\r\n      console.log('📁 初始化配置管理器...');\r\n      await configManager.initialize();\r\n\r\n      // 加载设置\r\n      console.log('⚙️ 加载用户设置...');\r\n      this.settings = configManager.get('settings', {});\r\n      console.log('📋 已加载设置项:', Object.keys(this.settings).length);\r\n\r\n      // 应用基础设置\r\n      this._applyBaseSettings(this.settings);\r\n\r\n      // 确定启动模块\r\n      const startupModule = this._determineStartupModule(this.settings);\r\n      console.log('📱 确定启动模块:', startupModule);\r\n\r\n      // 应用完整设置\r\n      console.log('🎨 应用完整设置...');\r\n      this._applyFullSettings(this.settings);\r\n\r\n      // 隐藏加载屏幕\r\n      if (showLoadingScreen) {\r\n        this._hideLoadingScreen();\r\n      }\r\n\r\n      this.isInitialized = true;\r\n      console.log('✅ 应用初始化完成');\r\n\r\n      return {\r\n        success: true,\r\n        settings: this.settings,\r\n        startupModule,\r\n        message: '应用初始化成功'\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('❌ 应用初始化失败:', error);\r\n      \r\n      // 隐藏加载屏幕\r\n      this._hideLoadingScreen();\r\n\r\n      // 应用默认设置，确保应用可用\r\n      this._applyDefaultSettings();\r\n\r\n      return {\r\n        success: false,\r\n        error,\r\n        settings: {},\r\n        startupModule: 'quote',\r\n        message: '应用初始化失败，使用默认设置'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 确定启动模块\r\n   * @private\r\n   */\r\n  _determineStartupModule(settings) {\r\n    const moduleComponents = ['calendar', 'bookmark', 'todo', 'note', 'quote', 'news'];\r\n    let startupModule = 'quote'; // 默认为一语\r\n\r\n    if (settings.startupModuleType === 'last') {\r\n      // 继承上次使用的模块\r\n      const lastModule = configManager.get('data.lastActiveModule', 'quote');\r\n      startupModule = lastModule;\r\n    } else if (settings.startupModuleType === 'specific') {\r\n      // 使用指定的模块\r\n      startupModule = settings.startupModule || 'quote';\r\n    } else {\r\n      // 如果没有设置，检查是否有上次使用的模块\r\n      const lastModule = configManager.get('data.lastActiveModule', null);\r\n      if (lastModule) {\r\n        startupModule = lastModule;\r\n      }\r\n    }\r\n\r\n    // 验证模块是否存在\r\n    if (!moduleComponents.includes(startupModule)) {\r\n      startupModule = 'quote';\r\n    }\r\n\r\n    return startupModule;\r\n  }\r\n\r\n  /**\r\n   * 应用基础样式（在配置加载前）\r\n   * @private\r\n   */\r\n  _applyBaseStyles() {\r\n    const root = document.documentElement;\r\n    \r\n    // 设置页面标题\r\n    document.title = '時';\r\n    \r\n    // 应用基础CSS变量\r\n    root.style.setProperty('--primary-color', '#4a90e2');\r\n    root.style.setProperty('--transition-speed', '0.3s');\r\n    \r\n    // 确保基础变量存在\r\n    root.style.setProperty('--background-color', '#ffffff');\r\n    root.style.setProperty('--card-background', '#f8f8f8');\r\n    root.style.setProperty('--border-color', '#e0e0e0');\r\n    root.style.setProperty('--text-color', '#333333');\r\n    root.style.setProperty('--text-secondary-color', '#666666');\r\n    root.style.setProperty('--hover-background', '#f0f0f0');\r\n  }\r\n\r\n  /**\r\n   * 应用基础设置\r\n   * @private\r\n   */\r\n  _applyBaseSettings(settings) {\r\n    const root = document.documentElement;\r\n    \r\n    // 应用用户自定义的基础CSS变量\r\n    root.style.setProperty('--primary-color', settings.linkColor || '#4a90e2');\r\n    \r\n    // 预设主题变量，避免闪烁\r\n    if (settings.theme === 'dark') {\r\n      document.body.classList.add('dark-mode');\r\n    } else {\r\n      document.body.classList.remove('dark-mode');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用默认设置（初始化失败时使用）\r\n   * @private\r\n   */\r\n  _applyDefaultSettings() {\r\n    const root = document.documentElement;\r\n    \r\n    // 设置页面标题\r\n    document.title = '時';\r\n    \r\n    // 应用默认主题\r\n    root.style.setProperty('--background-color', '#ffffff');\r\n    root.style.setProperty('--card-background', '#f8f8f8');\r\n    root.style.setProperty('--border-color', '#e0e0e0');\r\n    root.style.setProperty('--text-color', '#333333');\r\n    root.style.setProperty('--text-secondary-color', '#666666');\r\n    root.style.setProperty('--hover-background', '#f0f0f0');\r\n    root.style.setProperty('--primary-color', '#4a90e2');\r\n    \r\n    document.body.classList.remove('dark-mode');\r\n    \r\n    console.log('🔧 已应用默认设置');\r\n  }\r\n\r\n  /**\r\n   * 应用完整设置\r\n   * @private\r\n   */\r\n  _applyFullSettings(settings) {\r\n    try {\r\n      const root = document.documentElement;\r\n      const body = document.body;\r\n      \r\n      // 应用主题\r\n      const theme = settings.theme || 'light';\r\n      if (theme === 'dark') {\r\n        root.style.setProperty('--background-color', '#121212');\r\n        root.style.setProperty('--card-background', '#1e1e1e');\r\n        root.style.setProperty('--border-color', '#333333');\r\n        root.style.setProperty('--text-color', settings.textColor || '#e0e0e0');\r\n        root.style.setProperty('--text-secondary-color', '#a0a0a0');\r\n        root.style.setProperty('--hover-background', '#333333');\r\n        root.style.setProperty('--primary-color-light', 'rgba(74, 144, 226, 0.2)');\r\n        body.classList.add('dark-mode');\r\n      } else {\r\n        root.style.setProperty('--background-color', '#ffffff');\r\n        root.style.setProperty('--card-background', '#f8f8f8');\r\n        root.style.setProperty('--border-color', '#e0e0e0');\r\n        root.style.setProperty('--text-color', settings.textColor || '#333333');\r\n        root.style.setProperty('--text-secondary-color', '#666666');\r\n        root.style.setProperty('--hover-background', '#f0f0f0');\r\n        root.style.setProperty('--primary-color-light', 'rgba(74, 144, 226, 0.1)');\r\n        body.classList.remove('dark-mode');\r\n      }\r\n      \r\n      // 应用字体设置\r\n      if (settings.fontFamily) {\r\n        root.style.setProperty('--font-family', settings.fontFamily);\r\n      }\r\n      \r\n      // 使用背景管理器应用背景设置\r\n      backgroundManager.applySettings(settings);\r\n      \r\n    } catch (error) {\r\n      console.error('应用完整设置时出错:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 显示加载屏幕\r\n   * @private\r\n   */\r\n  _showLoadingScreen() {\r\n    // 检查是否已存在加载屏幕\r\n    if (document.getElementById('app-loading-screen')) {\r\n      return;\r\n    }\r\n\r\n    const loadingScreen = document.createElement('div');\r\n    loadingScreen.id = 'app-loading-screen';\r\n    loadingScreen.innerHTML = `\r\n      <div style=\"\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100vw;\r\n        height: 100vh;\r\n        background: var(--background-color, #ffffff);\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        z-index: 9999;\r\n        transition: opacity 0.3s ease;\r\n      \">\r\n        <div style=\"\r\n          width: 60px;\r\n          height: 60px;\r\n          border: 3px solid var(--border-color, #e0e0e0);\r\n          border-top: 3px solid var(--primary-color, #4a90e2);\r\n          border-radius: 50%;\r\n          animation: spin 1s linear infinite;\r\n          margin-bottom: 20px;\r\n        \"></div>\r\n        <div style=\"\r\n          font-size: 18px;\r\n          font-weight: 500;\r\n          color: var(--text-color, #333333);\r\n          margin-bottom: 8px;\r\n        \">正在加载...</div>\r\n        <div style=\"\r\n          font-size: 14px;\r\n          color: var(--text-secondary-color, #666666);\r\n        \">请稍候，正在初始化应用程序</div>\r\n      </div>\r\n      <style>\r\n        @keyframes spin {\r\n          0% { transform: rotate(0deg); }\r\n          100% { transform: rotate(360deg); }\r\n        }\r\n      </style>\r\n    `;\r\n\r\n    document.body.appendChild(loadingScreen);\r\n  }\r\n\r\n  /**\r\n   * 隐藏加载屏幕\r\n   * @private\r\n   */\r\n  _hideLoadingScreen() {\r\n    const loadingScreen = document.getElementById('app-loading-screen');\r\n    if (loadingScreen) {\r\n      loadingScreen.style.opacity = '0';\r\n      setTimeout(() => {\r\n        if (loadingScreen.parentNode) {\r\n          loadingScreen.parentNode.removeChild(loadingScreen);\r\n        }\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前设置\r\n   */\r\n  getSettings() {\r\n    return this.settings;\r\n  }\r\n\r\n  /**\r\n   * 更新设置\r\n   */\r\n  updateSettings(newSettings) {\r\n    this.settings = { ...this.settings, ...newSettings };\r\n    this._applyFullSettings(this.settings);\r\n  }\r\n\r\n  /**\r\n   * 重置初始化状态\r\n   */\r\n  reset() {\r\n    this.isInitialized = false;\r\n    this.initPromise = null;\r\n    this.settings = {};\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst appInitializer = new AppInitializer();\r\n\r\nexport default appInitializer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}