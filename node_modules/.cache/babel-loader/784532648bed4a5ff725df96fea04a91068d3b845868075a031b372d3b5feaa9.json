{"ast":null,"code":"var _jsxFileName = \"D:\\\\Jliu Pureey\\\\Documents\\\\Editor\\\\extion\\\\homepage\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { getFromStorage, saveToStorage } from '../utils/storage';\n\n// 创建上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// 主题提供者组件\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // 状态\n  const [theme, setTheme] = useState('light');\n\n  // 初始化主题\n  useEffect(() => {\n    const savedTheme = getFromStorage('homepage-theme', 'light');\n    setTheme(savedTheme);\n    document.documentElement.setAttribute('data-theme', savedTheme);\n  }, []);\n\n  // 切换主题\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    document.documentElement.setAttribute('data-theme', newTheme);\n\n    // 添加额外的深色模式适配\n    if (newTheme === 'dark') {\n      document.body.classList.add('dark-mode');\n    } else {\n      document.body.classList.remove('dark-mode');\n    }\n    saveToStorage('homepage-theme', newTheme);\n  };\n\n  // 设置特定主题\n  const setSpecificTheme = newTheme => {\n    setTheme(newTheme);\n    saveToStorage('homepage-theme', newTheme);\n    document.documentElement.setAttribute('data-theme', newTheme);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme,\n      setTheme: setSpecificTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n// 自定义钩子，用于访问主题上下文\n_s(ThemeProvider, \"Z8UCD9KudyQA62DCQ9e5cf9+m5k=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme必须在ThemeProvider内部使用');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","getFromStorage","saveToStorage","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","theme","setTheme","savedTheme","document","documentElement","setAttribute","toggleTheme","newTheme","body","classList","add","remove","setSpecificTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["D:/Jliu Pureey/Documents/Editor/extion/homepage/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { getFromStorage, saveToStorage } from '../utils/storage';\r\n\r\n// 创建上下文\r\nconst ThemeContext = createContext();\r\n\r\n// 主题提供者组件\r\nexport const ThemeProvider = ({ children }) => {\r\n  // 状态\r\n  const [theme, setTheme] = useState('light');\r\n  \r\n  // 初始化主题\r\n  useEffect(() => {\r\n    const savedTheme = getFromStorage('homepage-theme', 'light');\r\n    setTheme(savedTheme);\r\n    document.documentElement.setAttribute('data-theme', savedTheme);\r\n  }, []);\r\n  \r\n  // 切换主题\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    document.documentElement.setAttribute('data-theme', newTheme);\r\n    \r\n    // 添加额外的深色模式适配\r\n    if (newTheme === 'dark') {\r\n      document.body.classList.add('dark-mode');\r\n    } else {\r\n      document.body.classList.remove('dark-mode');\r\n    }\r\n    \r\n    saveToStorage('homepage-theme', newTheme);\r\n  };\r\n  \r\n  // 设置特定主题\r\n  const setSpecificTheme = (newTheme) => {\r\n    setTheme(newTheme);\r\n    saveToStorage('homepage-theme', newTheme);\r\n    document.documentElement.setAttribute('data-theme', newTheme);\r\n  };\r\n  \r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme: setSpecificTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// 自定义钩子，用于访问主题上下文\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (!context) {\r\n    throw new Error('useTheme必须在ThemeProvider内部使用');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,cAAc,EAAEC,aAAa,QAAQ,kBAAkB;;AAEhE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGR,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMS,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,OAAO,CAAC;;EAE3C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAGV,cAAc,CAAC,gBAAgB,EAAE,OAAO,CAAC;IAC5DS,QAAQ,CAACC,UAAU,CAAC;IACpBC,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEH,UAAU,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,QAAQ,GAAGP,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDC,QAAQ,CAACM,QAAQ,CAAC;IAClBJ,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEE,QAAQ,CAAC;;IAE7D;IACA,IAAIA,QAAQ,KAAK,MAAM,EAAE;MACvBJ,QAAQ,CAACK,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1C,CAAC,MAAM;MACLP,QAAQ,CAACK,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC;IAC7C;IAEAlB,aAAa,CAAC,gBAAgB,EAAEc,QAAQ,CAAC;EAC3C,CAAC;;EAED;EACA,MAAMK,gBAAgB,GAAIL,QAAQ,IAAK;IACrCN,QAAQ,CAACM,QAAQ,CAAC;IAClBd,aAAa,CAAC,gBAAgB,EAAEc,QAAQ,CAAC;IACzCJ,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEE,QAAQ,CAAC;EAC/D,CAAC;EAED,oBACEZ,OAAA,CAACC,YAAY,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEd,KAAK;MAAEM,WAAW;MAAEL,QAAQ,EAAEW;IAAiB,CAAE;IAAAd,QAAA,EAC9EA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAnB,EAAA,CAzCaF,aAAa;AAAAsB,EAAA,GAAbtB,aAAa;AA0C1B,OAAO,MAAMuB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAG/B,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAAC0B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACjD;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}