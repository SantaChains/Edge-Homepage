{"ast":null,"code":"/**\r\n * 简化的配置管理器 - 使用localStorage和config.json的混合方案\r\n */\n\n// 默认配置\nconst DEFAULT_CONFIG = {\n  version: \"1.0.0\",\n  lastUpdated: new Date().toISOString(),\n  settings: {\n    theme: 'light',\n    backgroundType: 'color',\n    backgroundColor: '#ffffff',\n    backgroundImage: '',\n    backgroundOpacity: 1,\n    backgroundBrightness: 1,\n    backgroundBlur: 0,\n    backgroundFit: 'cover',\n    textColor: '#000000',\n    linkColor: '#4a90e2',\n    fontFamily: 'Arial, sans-serif',\n    gradientType: 'linear',\n    gradientDirection: 'to right',\n    gradientColors: ['#4a90e2', '#9b59b6'],\n    gradientStops: [0, 100],\n    showBackground: true,\n    startupModuleType: 'last',\n    startupModule: 'quote'\n  },\n  data: {\n    lastActiveModule: 'quote',\n    bookmarks: [],\n    todos: [],\n    notes: [],\n    calendar: {\n      events: [],\n      countdowns: []\n    }\n  }\n};\nclass SimpleConfigManager {\n  constructor() {\n    this.config = null;\n    this.isInitialized = false;\n    this.isLoading = false;\n    this.loadPromise = null;\n    this.saveQueue = [];\n    this.autoSaveTimer = null;\n  }\n\n  /**\r\n   * 初始化配置管理器\r\n   */\n  async initialize() {\n    if (this.isInitialized) return this.config;\n    if (this.isLoading) return this.loadPromise;\n    this.isLoading = true;\n    this.loadPromise = this._doInitialize();\n    try {\n      await this.loadPromise;\n      this.startAutoSave();\n      return this.config;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  async _doInitialize() {\n    try {\n      // 尝试从localStorage加载现有配置\n      const savedConfig = this.getFromLocalStorage('homepage-config', null);\n      if (savedConfig) {\n        this.config = this.mergeWithDefaults(savedConfig);\n      } else {\n        // 迁移旧数据\n        await this.migrateFromOldStorage();\n      }\n      this.isInitialized = true;\n      console.log('简化配置管理器初始化成功');\n    } catch (error) {\n      console.error('配置管理器初始化失败:', error);\n      this.config = {\n        ...DEFAULT_CONFIG\n      };\n      this.isInitialized = true;\n    }\n  }\n\n  /**\r\n   * 从旧存储迁移数据\r\n   */\n  async migrateFromOldStorage() {\n    const migratedConfig = {\n      ...DEFAULT_CONFIG\n    };\n\n    // 迁移设置\n    const oldSettings = this.getFromLocalStorage('homepage-settings', {});\n    if (Object.keys(oldSettings).length > 0) {\n      migratedConfig.settings = {\n        ...migratedConfig.settings,\n        ...oldSettings\n      };\n    }\n\n    // 迁移数据\n    migratedConfig.data.lastActiveModule = this.getFromLocalStorage('last-active-module', 'quote');\n    migratedConfig.data.bookmarks = this.getFromLocalStorage('homepage-bookmarks', []);\n    migratedConfig.data.todos = this.getFromLocalStorage('homepage-todos', []);\n    migratedConfig.data.notes = this.getFromLocalStorage('homepage-notes', []);\n    const calendarData = this.getFromLocalStorage('homepage-calendar', {});\n    if (calendarData.events) migratedConfig.data.calendar.events = calendarData.events;\n    if (calendarData.countdowns) migratedConfig.data.calendar.countdowns = calendarData.countdowns;\n    this.config = migratedConfig;\n    await this.saveConfig();\n    console.log('数据迁移完成');\n  }\n\n  /**\r\n   * 合并配置与默认值\r\n   */\n  mergeWithDefaults(config) {\n    const merged = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\n    const deepMerge = (target, source) => {\n      for (const key in source) {\n        if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n          if (!target[key]) target[key] = {};\n          deepMerge(target[key], source[key]);\n        } else {\n          target[key] = source[key];\n        }\n      }\n    };\n    deepMerge(merged, config);\n    merged.lastUpdated = new Date().toISOString();\n    return merged;\n  }\n\n  /**\r\n   * 保存配置\r\n   */\n  async saveConfig() {\n    if (!this.config) return;\n    try {\n      this.config.lastUpdated = new Date().toISOString();\n\n      // 保存到localStorage\n      this.saveToLocalStorage('homepage-config', this.config);\n      console.log('配置保存成功');\n    } catch (error) {\n      console.error('保存配置失败:', error);\n    }\n  }\n\n  /**\r\n   * 获取配置值\r\n   */\n  get(path, defaultValue = null) {\n    if (!this.config) return defaultValue;\n    const keys = path.split('.');\n    let current = this.config;\n    for (const key of keys) {\n      if (current && typeof current === 'object' && key in current) {\n        current = current[key];\n      } else {\n        return defaultValue;\n      }\n    }\n    return current;\n  }\n\n  /**\r\n   * 设置配置值\r\n   */\n  async set(path, value) {\n    if (!this.config) await this.initialize();\n    const keys = path.split('.');\n    let current = this.config;\n\n    // 导航到父级对象\n    for (let i = 0; i < keys.length - 1; i++) {\n      const key = keys[i];\n      if (!current[key] || typeof current[key] !== 'object') {\n        current[key] = {};\n      }\n      current = current[key];\n    }\n\n    // 设置值\n    const lastKey = keys[keys.length - 1];\n    current[lastKey] = value;\n\n    // 队列保存，避免频繁保存\n    this.queueSave();\n  }\n\n  /**\r\n   * 队列保存（防抖）\r\n   */\n  queueSave() {\n    if (this.saveQueue.length === 0) {\n      setTimeout(async () => {\n        if (this.saveQueue.length > 0) {\n          await this.saveConfig();\n          this.saveQueue = [];\n        }\n      }, 500); // 500ms 防抖\n    }\n    this.saveQueue.push(Date.now());\n  }\n\n  /**\r\n   * 启动自动保存\r\n   */\n  startAutoSave() {\n    if (this.autoSaveTimer) return;\n    this.autoSaveTimer = setInterval(async () => {\n      if (this.saveQueue.length > 0) {\n        await this.saveConfig();\n        this.saveQueue = [];\n      }\n    }, 5000); // 每5秒检查一次\n  }\n\n  /**\r\n   * 停止自动保存\r\n   */\n  stopAutoSave() {\n    if (this.autoSaveTimer) {\n      clearInterval(this.autoSaveTimer);\n      this.autoSaveTimer = null;\n    }\n  }\n\n  /**\r\n   * 导出配置为config.json\r\n   */\n  exportConfig() {\n    if (!this.config) return null;\n    const configJson = JSON.stringify(this.config, null, 2);\n    const blob = new Blob([configJson], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'config.json';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    return configJson;\n  }\n\n  /**\r\n   * 导入配置\r\n   */\n  async importConfig(file) {\n    try {\n      const text = await file.text();\n      const importedConfig = JSON.parse(text);\n\n      // 验证配置格式\n      if (!this.validateConfig(importedConfig)) {\n        throw new Error('配置文件格式无效');\n      }\n      this.config = this.mergeWithDefaults(importedConfig);\n      await this.saveConfig();\n      return true;\n    } catch (error) {\n      console.error('导入配置失败:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * 验证配置格式\r\n   */\n  validateConfig(config) {\n    return config && typeof config === 'object' && config.settings && config.data;\n  }\n\n  /**\r\n   * 强制保存配置\r\n   */\n  async forceSave() {\n    await this.saveConfig();\n    console.log('配置强制保存完成');\n  }\n\n  /**\r\n   * 重置配置\r\n   */\n  async resetConfig() {\n    this.config = {\n      ...DEFAULT_CONFIG\n    };\n    await this.saveConfig();\n    console.log('配置已重置为默认值');\n  }\n\n  /**\r\n   * 获取配置统计信息\r\n   */\n  getStats() {\n    var _this$config$data$boo, _this$config$data$tod, _this$config$data$not, _this$config$data$cal, _this$config$data$cal2, _this$config$data$cal3, _this$config$data$cal4;\n    if (!this.config) return null;\n    return {\n      version: this.config.version,\n      lastUpdated: this.config.lastUpdated,\n      dataSize: JSON.stringify(this.config).length,\n      bookmarksCount: ((_this$config$data$boo = this.config.data.bookmarks) === null || _this$config$data$boo === void 0 ? void 0 : _this$config$data$boo.length) || 0,\n      todosCount: ((_this$config$data$tod = this.config.data.todos) === null || _this$config$data$tod === void 0 ? void 0 : _this$config$data$tod.length) || 0,\n      notesCount: ((_this$config$data$not = this.config.data.notes) === null || _this$config$data$not === void 0 ? void 0 : _this$config$data$not.length) || 0,\n      eventsCount: ((_this$config$data$cal = this.config.data.calendar) === null || _this$config$data$cal === void 0 ? void 0 : (_this$config$data$cal2 = _this$config$data$cal.events) === null || _this$config$data$cal2 === void 0 ? void 0 : _this$config$data$cal2.length) || 0,\n      countdownsCount: ((_this$config$data$cal3 = this.config.data.calendar) === null || _this$config$data$cal3 === void 0 ? void 0 : (_this$config$data$cal4 = _this$config$data$cal3.countdowns) === null || _this$config$data$cal4 === void 0 ? void 0 : _this$config$data$cal4.length) || 0\n    };\n  }\n\n  // 辅助方法\n  getFromLocalStorage(key, defaultValue) {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : defaultValue;\n    } catch {\n      return defaultValue;\n    }\n  }\n  saveToLocalStorage(key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error('localStorage保存失败:', error);\n    }\n  }\n}\n\n// 创建全局实例\nconst simpleConfigManager = new SimpleConfigManager();\nexport default simpleConfigManager;\nexport { DEFAULT_CONFIG };","map":{"version":3,"names":["DEFAULT_CONFIG","version","lastUpdated","Date","toISOString","settings","theme","backgroundType","backgroundColor","backgroundImage","backgroundOpacity","backgroundBrightness","backgroundBlur","backgroundFit","textColor","linkColor","fontFamily","gradientType","gradientDirection","gradientColors","gradientStops","showBackground","startupModuleType","startupModule","data","lastActiveModule","bookmarks","todos","notes","calendar","events","countdowns","SimpleConfigManager","constructor","config","isInitialized","isLoading","loadPromise","saveQueue","autoSaveTimer","initialize","_doInitialize","startAutoSave","savedConfig","getFromLocalStorage","mergeWithDefaults","migrateFromOldStorage","console","log","error","migratedConfig","oldSettings","Object","keys","length","calendarData","saveConfig","merged","JSON","parse","stringify","deepMerge","target","source","key","Array","isArray","saveToLocalStorage","get","path","defaultValue","split","current","set","value","i","lastKey","queueSave","setTimeout","push","now","setInterval","stopAutoSave","clearInterval","exportConfig","configJson","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","importConfig","file","text","importedConfig","validateConfig","Error","forceSave","resetConfig","getStats","_this$config$data$boo","_this$config$data$tod","_this$config$data$not","_this$config$data$cal","_this$config$data$cal2","_this$config$data$cal3","_this$config$data$cal4","dataSize","bookmarksCount","todosCount","notesCount","eventsCount","countdownsCount","item","localStorage","getItem","setItem","simpleConfigManager"],"sources":["D:/Jliu Pureey/Documents/Editor/extion/homepage/src/utils/simpleConfigManager.js"],"sourcesContent":["/**\r\n * 简化的配置管理器 - 使用localStorage和config.json的混合方案\r\n */\r\n\r\n// 默认配置\r\nconst DEFAULT_CONFIG = {\r\n  version: \"1.0.0\",\r\n  lastUpdated: new Date().toISOString(),\r\n  settings: {\r\n    theme: 'light',\r\n    backgroundType: 'color',\r\n    backgroundColor: '#ffffff',\r\n    backgroundImage: '',\r\n    backgroundOpacity: 1,\r\n    backgroundBrightness: 1,\r\n    backgroundBlur: 0,\r\n    backgroundFit: 'cover',\r\n    textColor: '#000000',\r\n    linkColor: '#4a90e2',\r\n    fontFamily: 'Arial, sans-serif',\r\n    gradientType: 'linear',\r\n    gradientDirection: 'to right',\r\n    gradientColors: ['#4a90e2', '#9b59b6'],\r\n    gradientStops: [0, 100],\r\n    showBackground: true,\r\n    startupModuleType: 'last',\r\n    startupModule: 'quote'\r\n  },\r\n  data: {\r\n    lastActiveModule: 'quote',\r\n    bookmarks: [],\r\n    todos: [],\r\n    notes: [],\r\n    calendar: {\r\n      events: [],\r\n      countdowns: []\r\n    }\r\n  }\r\n};\r\n\r\nclass SimpleConfigManager {\r\n  constructor() {\r\n    this.config = null;\r\n    this.isInitialized = false;\r\n    this.isLoading = false;\r\n    this.loadPromise = null;\r\n    this.saveQueue = [];\r\n    this.autoSaveTimer = null;\r\n  }\r\n\r\n  /**\r\n   * 初始化配置管理器\r\n   */\r\n  async initialize() {\r\n    if (this.isInitialized) return this.config;\r\n    if (this.isLoading) return this.loadPromise;\r\n\r\n    this.isLoading = true;\r\n    this.loadPromise = this._doInitialize();\r\n    \r\n    try {\r\n      await this.loadPromise;\r\n      this.startAutoSave();\r\n      return this.config;\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  async _doInitialize() {\r\n    try {\r\n      // 尝试从localStorage加载现有配置\r\n      const savedConfig = this.getFromLocalStorage('homepage-config', null);\r\n      \r\n      if (savedConfig) {\r\n        this.config = this.mergeWithDefaults(savedConfig);\r\n      } else {\r\n        // 迁移旧数据\r\n        await this.migrateFromOldStorage();\r\n      }\r\n      \r\n      this.isInitialized = true;\r\n      console.log('简化配置管理器初始化成功');\r\n    } catch (error) {\r\n      console.error('配置管理器初始化失败:', error);\r\n      this.config = { ...DEFAULT_CONFIG };\r\n      this.isInitialized = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从旧存储迁移数据\r\n   */\r\n  async migrateFromOldStorage() {\r\n    const migratedConfig = { ...DEFAULT_CONFIG };\r\n    \r\n    // 迁移设置\r\n    const oldSettings = this.getFromLocalStorage('homepage-settings', {});\r\n    if (Object.keys(oldSettings).length > 0) {\r\n      migratedConfig.settings = { ...migratedConfig.settings, ...oldSettings };\r\n    }\r\n\r\n    // 迁移数据\r\n    migratedConfig.data.lastActiveModule = this.getFromLocalStorage('last-active-module', 'quote');\r\n    migratedConfig.data.bookmarks = this.getFromLocalStorage('homepage-bookmarks', []);\r\n    migratedConfig.data.todos = this.getFromLocalStorage('homepage-todos', []);\r\n    migratedConfig.data.notes = this.getFromLocalStorage('homepage-notes', []);\r\n    \r\n    const calendarData = this.getFromLocalStorage('homepage-calendar', {});\r\n    if (calendarData.events) migratedConfig.data.calendar.events = calendarData.events;\r\n    if (calendarData.countdowns) migratedConfig.data.calendar.countdowns = calendarData.countdowns;\r\n\r\n    this.config = migratedConfig;\r\n    await this.saveConfig();\r\n    \r\n    console.log('数据迁移完成');\r\n  }\r\n\r\n  /**\r\n   * 合并配置与默认值\r\n   */\r\n  mergeWithDefaults(config) {\r\n    const merged = JSON.parse(JSON.stringify(DEFAULT_CONFIG));\r\n    \r\n    const deepMerge = (target, source) => {\r\n      for (const key in source) {\r\n        if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\r\n          if (!target[key]) target[key] = {};\r\n          deepMerge(target[key], source[key]);\r\n        } else {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    };\r\n\r\n    deepMerge(merged, config);\r\n    merged.lastUpdated = new Date().toISOString();\r\n    \r\n    return merged;\r\n  }\r\n\r\n  /**\r\n   * 保存配置\r\n   */\r\n  async saveConfig() {\r\n    if (!this.config) return;\r\n\r\n    try {\r\n      this.config.lastUpdated = new Date().toISOString();\r\n      \r\n      // 保存到localStorage\r\n      this.saveToLocalStorage('homepage-config', this.config);\r\n      \r\n      console.log('配置保存成功');\r\n    } catch (error) {\r\n      console.error('保存配置失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取配置值\r\n   */\r\n  get(path, defaultValue = null) {\r\n    if (!this.config) return defaultValue;\r\n    \r\n    const keys = path.split('.');\r\n    let current = this.config;\r\n    \r\n    for (const key of keys) {\r\n      if (current && typeof current === 'object' && key in current) {\r\n        current = current[key];\r\n      } else {\r\n        return defaultValue;\r\n      }\r\n    }\r\n    \r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * 设置配置值\r\n   */\r\n  async set(path, value) {\r\n    if (!this.config) await this.initialize();\r\n    \r\n    const keys = path.split('.');\r\n    let current = this.config;\r\n    \r\n    // 导航到父级对象\r\n    for (let i = 0; i < keys.length - 1; i++) {\r\n      const key = keys[i];\r\n      if (!current[key] || typeof current[key] !== 'object') {\r\n        current[key] = {};\r\n      }\r\n      current = current[key];\r\n    }\r\n    \r\n    // 设置值\r\n    const lastKey = keys[keys.length - 1];\r\n    current[lastKey] = value;\r\n    \r\n    // 队列保存，避免频繁保存\r\n    this.queueSave();\r\n  }\r\n\r\n  /**\r\n   * 队列保存（防抖）\r\n   */\r\n  queueSave() {\r\n    if (this.saveQueue.length === 0) {\r\n      setTimeout(async () => {\r\n        if (this.saveQueue.length > 0) {\r\n          await this.saveConfig();\r\n          this.saveQueue = [];\r\n        }\r\n      }, 500); // 500ms 防抖\r\n    }\r\n    this.saveQueue.push(Date.now());\r\n  }\r\n\r\n  /**\r\n   * 启动自动保存\r\n   */\r\n  startAutoSave() {\r\n    if (this.autoSaveTimer) return;\r\n    \r\n    this.autoSaveTimer = setInterval(async () => {\r\n      if (this.saveQueue.length > 0) {\r\n        await this.saveConfig();\r\n        this.saveQueue = [];\r\n      }\r\n    }, 5000); // 每5秒检查一次\r\n  }\r\n\r\n  /**\r\n   * 停止自动保存\r\n   */\r\n  stopAutoSave() {\r\n    if (this.autoSaveTimer) {\r\n      clearInterval(this.autoSaveTimer);\r\n      this.autoSaveTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 导出配置为config.json\r\n   */\r\n  exportConfig() {\r\n    if (!this.config) return null;\r\n    \r\n    const configJson = JSON.stringify(this.config, null, 2);\r\n    const blob = new Blob([configJson], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'config.json';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    return configJson;\r\n  }\r\n\r\n  /**\r\n   * 导入配置\r\n   */\r\n  async importConfig(file) {\r\n    try {\r\n      const text = await file.text();\r\n      const importedConfig = JSON.parse(text);\r\n      \r\n      // 验证配置格式\r\n      if (!this.validateConfig(importedConfig)) {\r\n        throw new Error('配置文件格式无效');\r\n      }\r\n      \r\n      this.config = this.mergeWithDefaults(importedConfig);\r\n      await this.saveConfig();\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('导入配置失败:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 验证配置格式\r\n   */\r\n  validateConfig(config) {\r\n    return config && \r\n           typeof config === 'object' && \r\n           config.settings && \r\n           config.data;\r\n  }\r\n\r\n  /**\r\n   * 强制保存配置\r\n   */\r\n  async forceSave() {\r\n    await this.saveConfig();\r\n    console.log('配置强制保存完成');\r\n  }\r\n\r\n  /**\r\n   * 重置配置\r\n   */\r\n  async resetConfig() {\r\n    this.config = { ...DEFAULT_CONFIG };\r\n    await this.saveConfig();\r\n    console.log('配置已重置为默认值');\r\n  }\r\n\r\n  /**\r\n   * 获取配置统计信息\r\n   */\r\n  getStats() {\r\n    if (!this.config) return null;\r\n    \r\n    return {\r\n      version: this.config.version,\r\n      lastUpdated: this.config.lastUpdated,\r\n      dataSize: JSON.stringify(this.config).length,\r\n      bookmarksCount: this.config.data.bookmarks?.length || 0,\r\n      todosCount: this.config.data.todos?.length || 0,\r\n      notesCount: this.config.data.notes?.length || 0,\r\n      eventsCount: this.config.data.calendar?.events?.length || 0,\r\n      countdownsCount: this.config.data.calendar?.countdowns?.length || 0\r\n    };\r\n  }\r\n\r\n  // 辅助方法\r\n  getFromLocalStorage(key, defaultValue) {\r\n    try {\r\n      const item = localStorage.getItem(key);\r\n      return item ? JSON.parse(item) : defaultValue;\r\n    } catch {\r\n      return defaultValue;\r\n    }\r\n  }\r\n\r\n  saveToLocalStorage(key, value) {\r\n    try {\r\n      localStorage.setItem(key, JSON.stringify(value));\r\n    } catch (error) {\r\n      console.error('localStorage保存失败:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nconst simpleConfigManager = new SimpleConfigManager();\r\n\r\nexport default simpleConfigManager;\r\nexport { DEFAULT_CONFIG };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}