{"ast":null,"code":"/**\r\n * 背景管理器 - 专门处理背景设置和应用\r\n */\n\nclass BackgroundManager {\n  constructor() {\n    this.backgroundContainer = null;\n    this.currentSettings = null;\n    this.isInitialized = false;\n  }\n\n  /**\r\n   * 初始化背景管理器\r\n   */\n  initialize() {\n    if (this.isInitialized) return;\n\n    // 创建专用的背景容器\n    this.createBackgroundContainer();\n    this.isInitialized = true;\n    console.log('背景管理器初始化完成');\n  }\n\n  /**\r\n   * 创建背景容器\r\n   */\n  createBackgroundContainer() {\n    // 移除现有的背景容器\n    const existingContainer = document.getElementById('homepage-background');\n    if (existingContainer) {\n      existingContainer.remove();\n    }\n\n    // 创建新的背景容器\n    this.backgroundContainer = document.createElement('div');\n    this.backgroundContainer.id = 'homepage-background';\n    this.backgroundContainer.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100vw;\n        height: 100vh;\n        z-index: -1;\n        pointer-events: none;\n        transition: all 0.3s ease;\n      `;\n    const insert = () => {\n      // 插入到 html，与 body 平级，确保位于内容下方\n      const root = document.documentElement;\n      root.insertBefore(this.backgroundContainer, root.firstElementChild);\n      console.log('背景容器创建成功');\n    };\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', insert);\n    } else {\n      insert();\n    }\n  }\n\n  /**\r\n   * 应用背景设置\r\n   */\n  applySettings(settings) {\n    if (!this.isInitialized) {\n      this.initialize();\n    }\n    this.currentSettings = settings;\n    console.log('应用背景设置:', settings);\n\n    // 清除现有样式\n    this.clearBackground();\n\n    // 重置 body 背景为透明，避免被遮盖\n    document.body.style.setProperty('background', 'transparent', 'important');\n    document.body.style.backgroundImage = 'none';\n    if (!settings || settings.showBackground === false) {\n      this.hideBackground();\n      return;\n    }\n\n    // 根据背景类型应用设置\n    switch (settings.backgroundType) {\n      case 'color':\n        this.applyColorBackground(settings);\n        break;\n      case 'image':\n        this.applyImageBackground(settings);\n        break;\n      case 'gradient':\n        this.applyGradientBackground(settings);\n        break;\n      default:\n        this.applyDefaultBackground();\n    }\n\n    // 应用通用效果\n    this.applyEffects(settings);\n    console.log('背景应用完成，容器状态:', this.getCurrentInfo());\n  }\n\n  /**\r\n   * 清除背景\r\n   */\n  clearBackground() {\n    if (this.backgroundContainer) {\n      this.backgroundContainer.style.background = '';\n      this.backgroundContainer.style.backgroundImage = '';\n      this.backgroundContainer.style.backgroundSize = '';\n      this.backgroundContainer.style.backgroundPosition = '';\n      this.backgroundContainer.style.backgroundRepeat = '';\n      this.backgroundContainer.style.backgroundAttachment = '';\n      this.backgroundContainer.style.opacity = '';\n      this.backgroundContainer.style.filter = '';\n    }\n  }\n\n  /**\r\n   * 隐藏背景\r\n   */\n  hideBackground() {\n    var _this$currentSettings;\n    if (this.backgroundContainer) {\n      this.backgroundContainer.style.display = 'none';\n    }\n\n    // 设置默认背景色\n    const theme = ((_this$currentSettings = this.currentSettings) === null || _this$currentSettings === void 0 ? void 0 : _this$currentSettings.theme) || 'light';\n    document.body.style.backgroundColor = theme === 'dark' ? '#121212' : '#ffffff';\n  }\n\n  /**\r\n   * 应用纯色背景\r\n   */\n  applyColorBackground(settings) {\n    if (!this.backgroundContainer) return;\n    const color = settings.backgroundColor || '#ffffff';\n    this.backgroundContainer.style.backgroundColor = color;\n    this.backgroundContainer.style.backgroundImage = 'none';\n    this.backgroundContainer.style.display = 'block';\n  }\n\n  /**\r\n   * 应用图片背景\r\n   */\n  applyImageBackground(settings) {\n    if (!this.backgroundContainer || !settings.backgroundImage) {\n      console.warn('背景容器不存在或图片URL为空');\n      return;\n    }\n    const imageUrl = settings.backgroundImage;\n    const fit = settings.backgroundFit || 'cover';\n    console.log('应用图片背景:', imageUrl, '适应方式:', fit);\n    this.backgroundContainer.style.backgroundImage = `url(\"${imageUrl}\")`;\n    this.backgroundContainer.style.backgroundSize = fit;\n    this.backgroundContainer.style.backgroundPosition = 'center center';\n    this.backgroundContainer.style.backgroundRepeat = 'no-repeat';\n    this.backgroundContainer.style.backgroundAttachment = 'fixed';\n    this.backgroundContainer.style.display = 'block';\n\n    // 预加载图片以确保显示\n    const img = new Image();\n    img.onload = () => {\n      console.log('背景图片加载成功:', imageUrl);\n    };\n    img.onerror = () => {\n      console.error('背景图片加载失败:', imageUrl);\n      this.applyDefaultBackground();\n    };\n    img.src = imageUrl;\n  }\n\n  /**\r\n   * 应用渐变背景\r\n   */\n  applyGradientBackground(settings) {\n    if (!this.backgroundContainer) return;\n    const {\n      gradientType = 'linear',\n      gradientDirection = 'to right',\n      gradientColors = ['#4a90e2', '#9b59b6'],\n      gradientStops = [0, 100]\n    } = settings;\n    if (!gradientColors || gradientColors.length < 2) {\n      this.applyDefaultBackground();\n      return;\n    }\n    let gradient;\n    if (gradientType === 'radial') {\n      gradient = `radial-gradient(circle, ${gradientColors[0]} ${gradientStops[0]}%, ${gradientColors[1]} ${gradientStops[1]}%)`;\n    } else {\n      gradient = `linear-gradient(${gradientDirection}, ${gradientColors[0]} ${gradientStops[0]}%, ${gradientColors[1]} ${gradientStops[1]}%)`;\n    }\n    this.backgroundContainer.style.background = gradient;\n    this.backgroundContainer.style.backgroundImage = gradient;\n    this.backgroundContainer.style.display = 'block';\n  }\n\n  /**\r\n   * 应用默认背景\r\n   */\n  applyDefaultBackground() {\n    var _this$currentSettings2;\n    if (!this.backgroundContainer) return;\n    const theme = ((_this$currentSettings2 = this.currentSettings) === null || _this$currentSettings2 === void 0 ? void 0 : _this$currentSettings2.theme) || 'light';\n    const defaultColor = theme === 'dark' ? '#121212' : '#ffffff';\n    this.backgroundContainer.style.backgroundColor = defaultColor;\n    this.backgroundContainer.style.backgroundImage = 'none';\n    this.backgroundContainer.style.display = 'block';\n  }\n\n  /**\r\n   * 应用背景效果\r\n   */\n  applyEffects(settings) {\n    if (!this.backgroundContainer) return;\n\n    // 透明度\n    const opacity = settings.backgroundOpacity !== undefined ? settings.backgroundOpacity : 1;\n    this.backgroundContainer.style.opacity = opacity;\n\n    // 滤镜效果\n    const filters = [];\n    if (settings.backgroundBrightness !== undefined && settings.backgroundBrightness !== 1) {\n      filters.push(`brightness(${settings.backgroundBrightness})`);\n    }\n    if (settings.backgroundBlur !== undefined && settings.backgroundBlur > 0) {\n      filters.push(`blur(${settings.backgroundBlur}px)`);\n    }\n    this.backgroundContainer.style.filter = filters.length > 0 ? filters.join(' ') : '';\n  }\n\n  /**\r\n   * 预览背景设置（不保存）\r\n   */\n  previewSettings(settings) {\n    const originalSettings = this.currentSettings;\n    this.applySettings(settings);\n\n    // 3秒后恢复原设置\n    setTimeout(() => {\n      if (originalSettings) {\n        this.applySettings(originalSettings);\n      }\n    }, 3000);\n  }\n\n  /**\r\n   * 获取当前背景信息\r\n   */\n  getCurrentInfo() {\n    var _this$backgroundConta;\n    return {\n      isInitialized: this.isInitialized,\n      hasContainer: !!this.backgroundContainer,\n      containerVisible: ((_this$backgroundConta = this.backgroundContainer) === null || _this$backgroundConta === void 0 ? void 0 : _this$backgroundConta.style.display) !== 'none',\n      currentSettings: this.currentSettings\n    };\n  }\n\n  /**\r\n   * 销毁背景管理器\r\n   */\n  destroy() {\n    if (this.backgroundContainer) {\n      this.backgroundContainer.remove();\n      this.backgroundContainer = null;\n    }\n    this.currentSettings = null;\n    this.isInitialized = false;\n  }\n}\n\n// 创建全局实例\nconst backgroundManager = new BackgroundManager();\n\n// 自动初始化背景管理器\nconst initializeBackgroundManager = () => {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n      backgroundManager.initialize();\n    });\n  } else {\n    backgroundManager.initialize();\n  }\n};\n\n// 立即尝试初始化\ninitializeBackgroundManager();\nexport default backgroundManager;","map":{"version":3,"names":["BackgroundManager","constructor","backgroundContainer","currentSettings","isInitialized","initialize","createBackgroundContainer","console","log","existingContainer","document","getElementById","remove","createElement","id","style","cssText","insert","root","documentElement","insertBefore","firstElementChild","readyState","addEventListener","applySettings","settings","clearBackground","body","setProperty","backgroundImage","showBackground","hideBackground","backgroundType","applyColorBackground","applyImageBackground","applyGradientBackground","applyDefaultBackground","applyEffects","getCurrentInfo","background","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","opacity","filter","_this$currentSettings","display","theme","backgroundColor","color","warn","imageUrl","fit","backgroundFit","img","Image","onload","onerror","error","src","gradientType","gradientDirection","gradientColors","gradientStops","length","gradient","_this$currentSettings2","defaultColor","backgroundOpacity","undefined","filters","backgroundBrightness","push","backgroundBlur","join","previewSettings","originalSettings","setTimeout","_this$backgroundConta","hasContainer","containerVisible","destroy","backgroundManager","initializeBackgroundManager"],"sources":["D:/Jliu Pureey/Documents/Editor/extion/homepage/src/utils/backgroundManager.js"],"sourcesContent":["/**\r\n * 背景管理器 - 专门处理背景设置和应用\r\n */\r\n\r\nclass BackgroundManager {\r\n  constructor() {\r\n    this.backgroundContainer = null;\r\n    this.currentSettings = null;\r\n    this.isInitialized = false;\r\n  }\r\n\r\n  /**\r\n   * 初始化背景管理器\r\n   */\r\n  initialize() {\r\n    if (this.isInitialized) return;\r\n\r\n    // 创建专用的背景容器\r\n    this.createBackgroundContainer();\r\n    this.isInitialized = true;\r\n    \r\n    console.log('背景管理器初始化完成');\r\n  }\r\n\r\n  /**\r\n   * 创建背景容器\r\n   */\r\n    createBackgroundContainer() {\r\n      // 移除现有的背景容器\r\n      const existingContainer = document.getElementById('homepage-background');\r\n      if (existingContainer) {\r\n        existingContainer.remove();\r\n      }\r\n\r\n      // 创建新的背景容器\r\n      this.backgroundContainer = document.createElement('div');\r\n      this.backgroundContainer.id = 'homepage-background';\r\n      this.backgroundContainer.style.cssText = `\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100vw;\r\n        height: 100vh;\r\n        z-index: -1;\r\n        pointer-events: none;\r\n        transition: all 0.3s ease;\r\n      `;\r\n\r\n      const insert = () => {\r\n        // 插入到 html，与 body 平级，确保位于内容下方\r\n        const root = document.documentElement;\r\n        root.insertBefore(this.backgroundContainer, root.firstElementChild);\r\n        console.log('背景容器创建成功');\r\n      };\r\n\r\n      if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', insert);\r\n      } else {\r\n        insert();\r\n      }\r\n    }\r\n\r\n  /**\r\n   * 应用背景设置\r\n   */\r\n  applySettings(settings) {\r\n    if (!this.isInitialized) {\r\n      this.initialize();\r\n    }\r\n\r\n    this.currentSettings = settings;\r\n    console.log('应用背景设置:', settings);\r\n\r\n    // 清除现有样式\r\n    this.clearBackground();\r\n\r\n    // 重置 body 背景为透明，避免被遮盖\r\n    document.body.style.setProperty('background', 'transparent', 'important');\r\n    document.body.style.backgroundImage = 'none';\r\n\r\n    if (!settings || settings.showBackground === false) {\r\n      this.hideBackground();\r\n      return;\r\n    }\r\n\r\n    // 根据背景类型应用设置\r\n    switch (settings.backgroundType) {\r\n      case 'color':\r\n        this.applyColorBackground(settings);\r\n        break;\r\n      case 'image':\r\n        this.applyImageBackground(settings);\r\n        break;\r\n      case 'gradient':\r\n        this.applyGradientBackground(settings);\r\n        break;\r\n      default:\r\n        this.applyDefaultBackground();\r\n    }\r\n\r\n    // 应用通用效果\r\n    this.applyEffects(settings);\r\n    \r\n    console.log('背景应用完成，容器状态:', this.getCurrentInfo());\r\n  }\r\n\r\n  /**\r\n   * 清除背景\r\n   */\r\n  clearBackground() {\r\n    if (this.backgroundContainer) {\r\n      this.backgroundContainer.style.background = '';\r\n      this.backgroundContainer.style.backgroundImage = '';\r\n      this.backgroundContainer.style.backgroundSize = '';\r\n      this.backgroundContainer.style.backgroundPosition = '';\r\n      this.backgroundContainer.style.backgroundRepeat = '';\r\n      this.backgroundContainer.style.backgroundAttachment = '';\r\n      this.backgroundContainer.style.opacity = '';\r\n      this.backgroundContainer.style.filter = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 隐藏背景\r\n   */\r\n  hideBackground() {\r\n    if (this.backgroundContainer) {\r\n      this.backgroundContainer.style.display = 'none';\r\n    }\r\n    \r\n    // 设置默认背景色\r\n    const theme = this.currentSettings?.theme || 'light';\r\n    document.body.style.backgroundColor = theme === 'dark' ? '#121212' : '#ffffff';\r\n  }\r\n\r\n  /**\r\n   * 应用纯色背景\r\n   */\r\n  applyColorBackground(settings) {\r\n    if (!this.backgroundContainer) return;\r\n\r\n    const color = settings.backgroundColor || '#ffffff';\r\n    this.backgroundContainer.style.backgroundColor = color;\r\n    this.backgroundContainer.style.backgroundImage = 'none';\r\n    this.backgroundContainer.style.display = 'block';\r\n  }\r\n\r\n  /**\r\n   * 应用图片背景\r\n   */\r\n  applyImageBackground(settings) {\r\n    if (!this.backgroundContainer || !settings.backgroundImage) {\r\n      console.warn('背景容器不存在或图片URL为空');\r\n      return;\r\n    }\r\n\r\n    const imageUrl = settings.backgroundImage;\r\n    const fit = settings.backgroundFit || 'cover';\r\n\r\n    console.log('应用图片背景:', imageUrl, '适应方式:', fit);\r\n\r\n    this.backgroundContainer.style.backgroundImage = `url(\"${imageUrl}\")`;\r\n    this.backgroundContainer.style.backgroundSize = fit;\r\n    this.backgroundContainer.style.backgroundPosition = 'center center';\r\n    this.backgroundContainer.style.backgroundRepeat = 'no-repeat';\r\n    this.backgroundContainer.style.backgroundAttachment = 'fixed';\r\n    this.backgroundContainer.style.display = 'block';\r\n\r\n    // 预加载图片以确保显示\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      console.log('背景图片加载成功:', imageUrl);\r\n    };\r\n    img.onerror = () => {\r\n      console.error('背景图片加载失败:', imageUrl);\r\n      this.applyDefaultBackground();\r\n    };\r\n    img.src = imageUrl;\r\n  }\r\n\r\n  /**\r\n   * 应用渐变背景\r\n   */\r\n  applyGradientBackground(settings) {\r\n    if (!this.backgroundContainer) return;\r\n\r\n    const {\r\n      gradientType = 'linear',\r\n      gradientDirection = 'to right',\r\n      gradientColors = ['#4a90e2', '#9b59b6'],\r\n      gradientStops = [0, 100]\r\n    } = settings;\r\n\r\n    if (!gradientColors || gradientColors.length < 2) {\r\n      this.applyDefaultBackground();\r\n      return;\r\n    }\r\n\r\n    let gradient;\r\n    if (gradientType === 'radial') {\r\n      gradient = `radial-gradient(circle, ${gradientColors[0]} ${gradientStops[0]}%, ${gradientColors[1]} ${gradientStops[1]}%)`;\r\n    } else {\r\n      gradient = `linear-gradient(${gradientDirection}, ${gradientColors[0]} ${gradientStops[0]}%, ${gradientColors[1]} ${gradientStops[1]}%)`;\r\n    }\r\n\r\n    this.backgroundContainer.style.background = gradient;\r\n    this.backgroundContainer.style.backgroundImage = gradient;\r\n    this.backgroundContainer.style.display = 'block';\r\n  }\r\n\r\n  /**\r\n   * 应用默认背景\r\n   */\r\n  applyDefaultBackground() {\r\n    if (!this.backgroundContainer) return;\r\n\r\n    const theme = this.currentSettings?.theme || 'light';\r\n    const defaultColor = theme === 'dark' ? '#121212' : '#ffffff';\r\n    \r\n    this.backgroundContainer.style.backgroundColor = defaultColor;\r\n    this.backgroundContainer.style.backgroundImage = 'none';\r\n    this.backgroundContainer.style.display = 'block';\r\n  }\r\n\r\n  /**\r\n   * 应用背景效果\r\n   */\r\n  applyEffects(settings) {\r\n    if (!this.backgroundContainer) return;\r\n\r\n    // 透明度\r\n    const opacity = settings.backgroundOpacity !== undefined ? settings.backgroundOpacity : 1;\r\n    this.backgroundContainer.style.opacity = opacity;\r\n\r\n    // 滤镜效果\r\n    const filters = [];\r\n    \r\n    if (settings.backgroundBrightness !== undefined && settings.backgroundBrightness !== 1) {\r\n      filters.push(`brightness(${settings.backgroundBrightness})`);\r\n    }\r\n    \r\n    if (settings.backgroundBlur !== undefined && settings.backgroundBlur > 0) {\r\n      filters.push(`blur(${settings.backgroundBlur}px)`);\r\n    }\r\n\r\n    this.backgroundContainer.style.filter = filters.length > 0 ? filters.join(' ') : '';\r\n  }\r\n\r\n  /**\r\n   * 预览背景设置（不保存）\r\n   */\r\n  previewSettings(settings) {\r\n    const originalSettings = this.currentSettings;\r\n    this.applySettings(settings);\r\n    \r\n    // 3秒后恢复原设置\r\n    setTimeout(() => {\r\n      if (originalSettings) {\r\n        this.applySettings(originalSettings);\r\n      }\r\n    }, 3000);\r\n  }\r\n\r\n  /**\r\n   * 获取当前背景信息\r\n   */\r\n  getCurrentInfo() {\r\n    return {\r\n      isInitialized: this.isInitialized,\r\n      hasContainer: !!this.backgroundContainer,\r\n      containerVisible: this.backgroundContainer?.style.display !== 'none',\r\n      currentSettings: this.currentSettings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 销毁背景管理器\r\n   */\r\n  destroy() {\r\n    if (this.backgroundContainer) {\r\n      this.backgroundContainer.remove();\r\n      this.backgroundContainer = null;\r\n    }\r\n    \r\n    this.currentSettings = null;\r\n    this.isInitialized = false;\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nconst backgroundManager = new BackgroundManager();\r\n\r\n// 自动初始化背景管理器\r\nconst initializeBackgroundManager = () => {\r\n  if (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      backgroundManager.initialize();\r\n    });\r\n  } else {\r\n    backgroundManager.initialize();\r\n  }\r\n};\r\n\r\n// 立即尝试初始化\r\ninitializeBackgroundManager();\r\n\r\nexport default backgroundManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}