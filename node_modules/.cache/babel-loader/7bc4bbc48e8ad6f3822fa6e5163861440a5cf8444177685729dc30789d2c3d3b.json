{"ast":null,"code":"import{format,addDays,differenceInDays,isValid,parse}from'date-fns';import{zhCN}from'date-fns/locale';/**\r\n * 格式化日期时间\r\n * @param {Date|number} date - 日期对象或时间戳\r\n * @param {string} formatStr - 格式化字符串\r\n * @param {Object} options - 选项\r\n * @returns {string} 格式化后的日期时间字符串\r\n */export const formatDateTime=function(date){let formatStr=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'yyyy-MM-dd HH:mm:ss';let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{const dateObj=date instanceof Date?date:new Date(date);return format(dateObj,formatStr,{locale:zhCN,...options});}catch(error){console.error('格式化日期时间失败:',error);return'';}};/**\r\n * 获取当前日期时间\r\n * @param {string} formatStr - 格式化字符串\r\n * @returns {string} 格式化后的当前日期时间字符串\r\n */export const getCurrentDateTime=function(){let formatStr=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'yyyy-MM-dd HH:mm:ss';return formatDateTime(new Date(),formatStr);};/**\r\n * 计算两个日期之间的天数差\r\n * @param {Date|number|string} startDate - 开始日期\r\n * @param {Date|number|string} endDate - 结束日期\r\n * @returns {number} 天数差\r\n */export const getDaysDifference=(startDate,endDate)=>{try{const start=startDate instanceof Date?startDate:new Date(startDate);const end=endDate instanceof Date?endDate:new Date(endDate);return differenceInDays(end,start);}catch(error){console.error('计算日期差异失败:',error);return 0;}};/**\r\n * 添加天数到日期\r\n * @param {Date|number|string} date - 日期\r\n * @param {number} days - 天数\r\n * @returns {Date} 新日期\r\n */export const addDaysToDate=(date,days)=>{try{const dateObj=date instanceof Date?date:new Date(date);return addDays(dateObj,days);}catch(error){console.error('添加天数到日期失败:',error);return new Date();}};/**\r\n * 解析日期字符串\r\n * @param {string} dateStr - 日期字符串\r\n * @param {string} formatStr - 格式化字符串\r\n * @returns {Date|null} 解析后的日期对象，如果解析失败则返回null\r\n */export const parseDate=function(dateStr){let formatStr=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'yyyy-MM-dd';try{const parsedDate=parse(dateStr,formatStr,new Date());return isValid(parsedDate)?parsedDate:null;}catch(error){console.error('解析日期失败:',error);return null;}};/**\r\n * 获取农历日期（简化版，仅用于示例）\r\n * @param {Date|number|string} date - 日期\r\n * @returns {string} 农历日期字符串\r\n */export const getLunarDate=date=>{// 这里应该使用专门的农历计算库，这里仅作为示例返回固定值\nreturn'农历日期计算需要专门的库';};/**\r\n * 获取竺纪笠历法日期（示例）\r\n * @param {Date|number|string} date - 日期\r\n * @returns {string} 竺纪笠历法日期字符串\r\n */export const getZhuJiLiDate=date=>{try{const dateObj=date instanceof Date?date:new Date(date);// 这里是一个简化的竺纪笠历法计算示例\n// 实际应用中应该使用更复杂的算法\nconst year=dateObj.getFullYear()+2698;// 假设竺纪笠纪元比公元早2698年\nconst month=dateObj.getMonth()+1;const day=dateObj.getDate();return`竺纪笠 ${year}年 ${month}月 ${day}日`;}catch(error){console.error('计算竺纪笠日期失败:',error);return'';}};/**\r\n * 获取一周的日期范围\r\n * @param {Date} date - 日期\r\n * @returns {Array} 一周的日期数组\r\n */export const getWeekDates=function(){let date=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Date();const day=date.getDay();const diff=date.getDate()-day+(day===0?-6:1);// 调整周日\nconst monday=new Date(date.setDate(diff));const weekDates=[];for(let i=0;i<7;i++){weekDates.push(addDaysToDate(monday,i));}return weekDates;};/**\r\n * 获取月份的天数\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {number} 天数\r\n */export const getDaysInMonth=(year,month)=>{return new Date(year,month,0).getDate();};/**\r\n * 获取月份的第一天是星期几\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {number} 星期几（0-6，0表示星期日）\r\n */export const getFirstDayOfMonth=(year,month)=>{return new Date(year,month-1,1).getDay();};/**\r\n * 生成月历数据\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {Array} 月历数据\r\n */export const generateCalendarData=(year,month)=>{const daysInMonth=getDaysInMonth(year,month);const firstDay=getFirstDayOfMonth(year,month);// 调整星期日为一周的第一天\nconst adjustedFirstDay=firstDay===0?6:firstDay-1;const calendarData=[];let week=[];// 填充月初的空白\nfor(let i=0;i<adjustedFirstDay;i++){week.push(null);}// 填充日期\nfor(let day=1;day<=daysInMonth;day++){week.push(day);if(week.length===7){calendarData.push(week);week=[];}}// 填充月末的空白\nif(week.length>0){while(week.length<7){week.push(null);}calendarData.push(week);}return calendarData;};","map":{"version":3,"names":["format","addDays","differenceInDays","isValid","parse","zhCN","formatDateTime","date","formatStr","arguments","length","undefined","options","dateObj","Date","locale","error","console","getCurrentDateTime","getDaysDifference","startDate","endDate","start","end","addDaysToDate","days","parseDate","dateStr","parsedDate","getLunarDate","getZhuJiLiDate","year","getFullYear","month","getMonth","day","getDate","getWeekDates","getDay","diff","monday","setDate","weekDates","i","push","getDaysInMonth","getFirstDayOfMonth","generateCalendarData","daysInMonth","firstDay","adjustedFirstDay","calendarData","week"],"sources":["D:/Jliu Pureey/Documents/Editor/extion/homepage/src/utils/dateTime.js"],"sourcesContent":["import { format, addDays, differenceInDays, isValid, parse } from 'date-fns';\r\nimport { zhCN } from 'date-fns/locale';\r\n\r\n/**\r\n * 格式化日期时间\r\n * @param {Date|number} date - 日期对象或时间戳\r\n * @param {string} formatStr - 格式化字符串\r\n * @param {Object} options - 选项\r\n * @returns {string} 格式化后的日期时间字符串\r\n */\r\nexport const formatDateTime = (date, formatStr = 'yyyy-MM-dd HH:mm:ss', options = {}) => {\r\n  try {\r\n    const dateObj = date instanceof Date ? date : new Date(date);\r\n    return format(dateObj, formatStr, {\r\n      locale: zhCN,\r\n      ...options\r\n    });\r\n  } catch (error) {\r\n    console.error('格式化日期时间失败:', error);\r\n    return '';\r\n  }\r\n};\r\n\r\n/**\r\n * 获取当前日期时间\r\n * @param {string} formatStr - 格式化字符串\r\n * @returns {string} 格式化后的当前日期时间字符串\r\n */\r\nexport const getCurrentDateTime = (formatStr = 'yyyy-MM-dd HH:mm:ss') => {\r\n  return formatDateTime(new Date(), formatStr);\r\n};\r\n\r\n/**\r\n * 计算两个日期之间的天数差\r\n * @param {Date|number|string} startDate - 开始日期\r\n * @param {Date|number|string} endDate - 结束日期\r\n * @returns {number} 天数差\r\n */\r\nexport const getDaysDifference = (startDate, endDate) => {\r\n  try {\r\n    const start = startDate instanceof Date ? startDate : new Date(startDate);\r\n    const end = endDate instanceof Date ? endDate : new Date(endDate);\r\n    return differenceInDays(end, start);\r\n  } catch (error) {\r\n    console.error('计算日期差异失败:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * 添加天数到日期\r\n * @param {Date|number|string} date - 日期\r\n * @param {number} days - 天数\r\n * @returns {Date} 新日期\r\n */\r\nexport const addDaysToDate = (date, days) => {\r\n  try {\r\n    const dateObj = date instanceof Date ? date : new Date(date);\r\n    return addDays(dateObj, days);\r\n  } catch (error) {\r\n    console.error('添加天数到日期失败:', error);\r\n    return new Date();\r\n  }\r\n};\r\n\r\n/**\r\n * 解析日期字符串\r\n * @param {string} dateStr - 日期字符串\r\n * @param {string} formatStr - 格式化字符串\r\n * @returns {Date|null} 解析后的日期对象，如果解析失败则返回null\r\n */\r\nexport const parseDate = (dateStr, formatStr = 'yyyy-MM-dd') => {\r\n  try {\r\n    const parsedDate = parse(dateStr, formatStr, new Date());\r\n    return isValid(parsedDate) ? parsedDate : null;\r\n  } catch (error) {\r\n    console.error('解析日期失败:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取农历日期（简化版，仅用于示例）\r\n * @param {Date|number|string} date - 日期\r\n * @returns {string} 农历日期字符串\r\n */\r\nexport const getLunarDate = (date) => {\r\n  // 这里应该使用专门的农历计算库，这里仅作为示例返回固定值\r\n  return '农历日期计算需要专门的库';\r\n};\r\n\r\n/**\r\n * 获取竺纪笠历法日期（示例）\r\n * @param {Date|number|string} date - 日期\r\n * @returns {string} 竺纪笠历法日期字符串\r\n */\r\nexport const getZhuJiLiDate = (date) => {\r\n  try {\r\n    const dateObj = date instanceof Date ? date : new Date(date);\r\n    \r\n    // 这里是一个简化的竺纪笠历法计算示例\r\n    // 实际应用中应该使用更复杂的算法\r\n    const year = dateObj.getFullYear() + 2698; // 假设竺纪笠纪元比公元早2698年\r\n    const month = dateObj.getMonth() + 1;\r\n    const day = dateObj.getDate();\r\n    \r\n    return `竺纪笠 ${year}年 ${month}月 ${day}日`;\r\n  } catch (error) {\r\n    console.error('计算竺纪笠日期失败:', error);\r\n    return '';\r\n  }\r\n};\r\n\r\n/**\r\n * 获取一周的日期范围\r\n * @param {Date} date - 日期\r\n * @returns {Array} 一周的日期数组\r\n */\r\nexport const getWeekDates = (date = new Date()) => {\r\n  const day = date.getDay();\r\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // 调整周日\r\n  \r\n  const monday = new Date(date.setDate(diff));\r\n  const weekDates = [];\r\n  \r\n  for (let i = 0; i < 7; i++) {\r\n    weekDates.push(addDaysToDate(monday, i));\r\n  }\r\n  \r\n  return weekDates;\r\n};\r\n\r\n/**\r\n * 获取月份的天数\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {number} 天数\r\n */\r\nexport const getDaysInMonth = (year, month) => {\r\n  return new Date(year, month, 0).getDate();\r\n};\r\n\r\n/**\r\n * 获取月份的第一天是星期几\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {number} 星期几（0-6，0表示星期日）\r\n */\r\nexport const getFirstDayOfMonth = (year, month) => {\r\n  return new Date(year, month - 1, 1).getDay();\r\n};\r\n\r\n/**\r\n * 生成月历数据\r\n * @param {number} year - 年份\r\n * @param {number} month - 月份（1-12）\r\n * @returns {Array} 月历数据\r\n */\r\nexport const generateCalendarData = (year, month) => {\r\n  const daysInMonth = getDaysInMonth(year, month);\r\n  const firstDay = getFirstDayOfMonth(year, month);\r\n  \r\n  // 调整星期日为一周的第一天\r\n  const adjustedFirstDay = firstDay === 0 ? 6 : firstDay - 1;\r\n  \r\n  const calendarData = [];\r\n  let week = [];\r\n  \r\n  // 填充月初的空白\r\n  for (let i = 0; i < adjustedFirstDay; i++) {\r\n    week.push(null);\r\n  }\r\n  \r\n  // 填充日期\r\n  for (let day = 1; day <= daysInMonth; day++) {\r\n    week.push(day);\r\n    \r\n    if (week.length === 7) {\r\n      calendarData.push(week);\r\n      week = [];\r\n    }\r\n  }\r\n  \r\n  // 填充月末的空白\r\n  if (week.length > 0) {\r\n    while (week.length < 7) {\r\n      week.push(null);\r\n    }\r\n    calendarData.push(week);\r\n  }\r\n  \r\n  return calendarData;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}